
bin/BareMetal_V5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001180  00000000  00000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  20000000  20000000  00002180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  20000000  00001180  00000000  2**0
                  ALLOC
  3 Heap          00002e00  20000000  00001180  00003000  2**0
                  ALLOC
  4 Stack         00000200  20002e00  00001180  00002e00  2**0
                  ALLOC
  5 .debug_info   0000268e  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 000008d0  00000000  00000000  0000480e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_aranges 000000d8  00000000  00000000  000050de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   0000102d  00000000  00000000  000051b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    0000104f  00000000  00000000  000061e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      00000045  00000000  00000000  00007232  2**0
                  CONTENTS, READONLY
 11 .ARM.attributes 0000002c  00000000  00000000  00007277  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00000684  00000000  00000000  000072a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 000000c9  00000000  00000000  00007928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <vector>:
       0:	00 40 00 20 df 0d 00 00 75 0e 00 00 7d 0e 00 00     .@. ....u...}...
	...
      2c:	75 0e 00 00 00 00 00 00 00 00 00 00 75 0e 00 00     u...........u...
      3c:	75 0e 00 00 75 0e 00 00 75 0e 00 00 75 0e 00 00     u...u...u...u...
      4c:	75 0e 00 00 75 0e 00 00 75 0e 00 00 75 0e 00 00     u...u...u...u...
      5c:	75 0e 00 00 75 0e 00 00 75 0e 00 00 75 0e 00 00     u...u...u...u...
      6c:	75 0e 00 00 75 0e 00 00 75 0e 00 00 75 0e 00 00     u...u...u...u...
      7c:	75 0e 00 00 75 0e 00 00 75 0e 00 00 85 01 00 00     u...u...u.......
      8c:	75 0e 00 00 75 0e 00 00 75 0e 00 00 75 0e 00 00     u...u...u...u...
      9c:	75 0e 00 00 75 0e 00 00 75 0e 00 00 75 0e 00 00     u...u...u...u...
      ac:	75 0e 00 00 00 00 00 00 00 00 00 00 00 00 00 00     u...............
      bc:	00 00 00 00                                         ....

000000c0 <main>:

volatile uint8_t invertFLAG = 0u;
uint8_t g_sw_flag = 0u;

int main()
{  
      c0:	b580      	push	{r7, lr}
      c2:	af00      	add	r7, sp, #0
    /* HF CLOCK divider init*/
    Cy_SysClk_ClkHfSetDivider(0u); //0 - No Divider, 1 - DIV by 2, 2 = DIV by 4, 3 = DIV by 8
      c4:	2000      	movs	r0, #0
      c6:	f000 fd43 	bl	b50 <Cy_SysClk_ClkHfSetDivider>

    /*GPIO pin init*/
    GPIO_Pin_Init((GPIO_PRT_Type *)CYREG_GPIO_PRT2_DR, 1u, &MT1_P2_1_config, HSIOM_SEL_GPIO);
      ca:	4a26      	ldr	r2, [pc, #152]	@ (164 <main+0xa4>)
      cc:	4826      	ldr	r0, [pc, #152]	@ (168 <main+0xa8>)
      ce:	2300      	movs	r3, #0
      d0:	2101      	movs	r1, #1
      d2:	f000 f915 	bl	300 <GPIO_Pin_Init>
    GPIO_Pin_Init((GPIO_PRT_Type *)CYREG_GPIO_PRT1_DR, 5u, &MT2_P1_5_config, HSIOM_SEL_GPIO);
      d6:	4a25      	ldr	r2, [pc, #148]	@ (16c <main+0xac>)
      d8:	4825      	ldr	r0, [pc, #148]	@ (170 <main+0xb0>)
      da:	2300      	movs	r3, #0
      dc:	2105      	movs	r1, #5
      de:	f000 f90f 	bl	300 <GPIO_Pin_Init>
    GPIO_Pin_Init((GPIO_PRT_Type *)CYREG_GPIO_PRT1_DR, 2u, &PWM_P1_2_config, HSIOM_SEL_PWM); //PWM Init
      e2:	4a24      	ldr	r2, [pc, #144]	@ (174 <main+0xb4>)
      e4:	4822      	ldr	r0, [pc, #136]	@ (170 <main+0xb0>)
      e6:	2308      	movs	r3, #8
      e8:	2102      	movs	r1, #2
      ea:	f000 f909 	bl	300 <GPIO_Pin_Init>

    /* Peripheral clock initializatio*/
    init_peri_Clock_Config();
      ee:	f000 f874 	bl	1da <init_peri_Clock_Config>


    /*TIMER 3 - PWM - INIT*/
    TCPWM_PWM_Init(TCPWM, 1U, &USER_PWM_config);
      f2:	4b21      	ldr	r3, [pc, #132]	@ (178 <main+0xb8>)
      f4:	4821      	ldr	r0, [pc, #132]	@ (17c <main+0xbc>)
      f6:	001a      	movs	r2, r3
      f8:	2101      	movs	r1, #1
      fa:	f000 fad0 	bl	69e <TCPWM_PWM_Init>
    TCPWM_Counter_Enable(TCPWM, 1U);
      fe:	4b1f      	ldr	r3, [pc, #124]	@ (17c <main+0xbc>)
     100:	2101      	movs	r1, #1
     102:	0018      	movs	r0, r3
     104:	f000 fbdd 	bl	8c2 <TCPWM_Counter_Enable>
    TCPWM_SetInterrupt(TCPWM, 1, 1); // 1-TC, 2-CC, 3-TC/CC
     108:	4b1c      	ldr	r3, [pc, #112]	@ (17c <main+0xbc>)
     10a:	2201      	movs	r2, #1
     10c:	2101      	movs	r1, #1
     10e:	0018      	movs	r0, r3
     110:	f000 fbe9 	bl	8e6 <TCPWM_SetInterrupt>

    GPIO_write((GPIO_PRT_Type *)CYREG_GPIO_PRT1_DR, 5u, 1u);
     114:	4b16      	ldr	r3, [pc, #88]	@ (170 <main+0xb0>)
     116:	2201      	movs	r2, #1
     118:	2105      	movs	r1, #5
     11a:	0018      	movs	r0, r3
     11c:	f000 f874 	bl	208 <GPIO_write>
    GPIO_write((GPIO_PRT_Type *)CYREG_GPIO_PRT2_DR, 1u, 0u);
     120:	4b11      	ldr	r3, [pc, #68]	@ (168 <main+0xa8>)
     122:	2200      	movs	r2, #0
     124:	2101      	movs	r1, #1
     126:	0018      	movs	r0, r3
     128:	f000 f86e 	bl	208 <GPIO_write>
    TCPWM_PWM_SetCompare0(TCPWM, 1U, 5000);
     12c:	4a14      	ldr	r2, [pc, #80]	@ (180 <main+0xc0>)
     12e:	4b13      	ldr	r3, [pc, #76]	@ (17c <main+0xbc>)
     130:	2101      	movs	r1, #1
     132:	0018      	movs	r0, r3
     134:	f000 fc32 	bl	99c <TCPWM_PWM_SetCompare0>

    NVIC_SetPriority(18u, 1u);
     138:	2101      	movs	r1, #1
     13a:	2012      	movs	r0, #18
     13c:	f000 fdd6 	bl	cec <NVIC_SetPriority>
    /* Clearing and enabling the GPIO interrupt in NVIC */
    NVIC_ClearPendingIRQ(18u);
     140:	2012      	movs	r0, #18
     142:	f000 fe01 	bl	d48 <NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(18u);
     146:	2012      	movs	r0, #18
     148:	f000 fe14 	bl	d74 <NVIC_EnableIRQ>
    enable_irq();
     14c:	f000 fdc2 	bl	cd4 <enable_irq>

    TCPWM_TriggerReloadOrIndex(TCPWM, 1UL << 1u);
     150:	4b0a      	ldr	r3, [pc, #40]	@ (17c <main+0xbc>)
     152:	2102      	movs	r1, #2
     154:	0018      	movs	r0, r3
     156:	f000 fbf9 	bl	94c <TCPWM_TriggerReloadOrIndex>
}

 */


    enable_irq();
     15a:	f000 fdbb 	bl	cd4 <enable_irq>
    for(;;)
     15e:	46c0      	nop			@ (mov r8, r8)
     160:	e7fd      	b.n	15e <main+0x9e>
     162:	46c0      	nop			@ (mov r8, r8)
     164:	00000fe4 	.word	0x00000fe4
     168:	40040200 	.word	0x40040200
     16c:	00000ff8 	.word	0x00000ff8
     170:	40040100 	.word	0x40040100
     174:	00001048 	.word	0x00001048
     178:	0000111c 	.word	0x0000111c
     17c:	40200000 	.word	0x40200000
     180:	00001388 	.word	0x00001388

00000184 <tcpwm_interrupts_1_IRQHandler>:

    return 0;
}


void tcpwm_interrupts_1_IRQHandler (void){
     184:	b580      	push	{r7, lr}
     186:	af00      	add	r7, sp, #0
   TCPWM_ClearInterrupt(TCPWM, 1, 1);
     188:	4b04      	ldr	r3, [pc, #16]	@ (19c <tcpwm_interrupts_1_IRQHandler+0x18>)
     18a:	2201      	movs	r2, #1
     18c:	2101      	movs	r1, #1
     18e:	0018      	movs	r0, r3
     190:	f000 fbe9 	bl	966 <TCPWM_ClearInterrupt>
    
}
     194:	46c0      	nop			@ (mov r8, r8)
     196:	46bd      	mov	sp, r7
     198:	bd80      	pop	{r7, pc}
     19a:	46c0      	nop			@ (mov r8, r8)
     19c:	40200000 	.word	0x40200000

000001a0 <Delay>:

/*Delay with simple for loops*/
void Delay(int32_t delayNumber)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b084      	sub	sp, #16
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
    for(int32_t i=0; i<delayNumber; i++);
     1a8:	2300      	movs	r3, #0
     1aa:	60fb      	str	r3, [r7, #12]
     1ac:	e002      	b.n	1b4 <Delay+0x14>
     1ae:	68fb      	ldr	r3, [r7, #12]
     1b0:	3301      	adds	r3, #1
     1b2:	60fb      	str	r3, [r7, #12]
     1b4:	68fa      	ldr	r2, [r7, #12]
     1b6:	687b      	ldr	r3, [r7, #4]
     1b8:	429a      	cmp	r2, r3
     1ba:	dbf8      	blt.n	1ae <Delay+0xe>
    for(int32_t i=0; i<delayNumber; i++);
     1bc:	2300      	movs	r3, #0
     1be:	60bb      	str	r3, [r7, #8]
     1c0:	e002      	b.n	1c8 <Delay+0x28>
     1c2:	68bb      	ldr	r3, [r7, #8]
     1c4:	3301      	adds	r3, #1
     1c6:	60bb      	str	r3, [r7, #8]
     1c8:	68ba      	ldr	r2, [r7, #8]
     1ca:	687b      	ldr	r3, [r7, #4]
     1cc:	429a      	cmp	r2, r3
     1ce:	dbf8      	blt.n	1c2 <Delay+0x22>
}
     1d0:	46c0      	nop			@ (mov r8, r8)
     1d2:	46c0      	nop			@ (mov r8, r8)
     1d4:	46bd      	mov	sp, r7
     1d6:	b004      	add	sp, #16
     1d8:	bd80      	pop	{r7, pc}

000001da <init_peri_Clock_Config>:

/*Peripheral clock initilizations*/
void init_peri_Clock_Config()
{
     1da:	b580      	push	{r7, lr}
     1dc:	af00      	add	r7, sp, #0
    //TIMER 3 PWM- CLOCK
    SysClk_PeriphDisableDivider(CY_SYSCLK_DIV_16_BIT,3U);
     1de:	2103      	movs	r1, #3
     1e0:	2001      	movs	r0, #1
     1e2:	f000 fc33 	bl	a4c <SysClk_PeriphDisableDivider>
    SysClk_PeriphSetDivider(CY_SYSCLK_DIV_16_BIT, 3U, 240U - 1);
     1e6:	22ef      	movs	r2, #239	@ 0xef
     1e8:	2103      	movs	r1, #3
     1ea:	2001      	movs	r0, #1
     1ec:	f000 fc4a 	bl	a84 <SysClk_PeriphSetDivider>
    SysClk_PeriphEnableDivider(CY_SYSCLK_DIV_16_BIT, 3U);
     1f0:	2103      	movs	r1, #3
     1f2:	2001      	movs	r0, #1
     1f4:	f000 fc6e 	bl	ad4 <SysClk_PeriphEnableDivider>
    SysClk_PeriphAssignDivider(PCLK_TCPWM_CLOCKS1 ,CY_SYSCLK_DIV_16_BIT , 3U);
     1f8:	2203      	movs	r2, #3
     1fa:	2101      	movs	r1, #1
     1fc:	2007      	movs	r0, #7
     1fe:	f000 fc87 	bl	b10 <SysClk_PeriphAssignDivider>
}
     202:	46c0      	nop			@ (mov r8, r8)
     204:	46bd      	mov	sp, r7
     206:	bd80      	pop	{r7, pc}

00000208 <GPIO_write>:
#include <stdint.h>
#include "gpio.h"

void GPIO_write(GPIO_PRT_Type* base, uint32_t pinNum, uint32_t value)
{
     208:	b580      	push	{r7, lr}
     20a:	b084      	sub	sp, #16
     20c:	af00      	add	r7, sp, #0
     20e:	60f8      	str	r0, [r7, #12]
     210:	60b9      	str	r1, [r7, #8]
     212:	607a      	str	r2, [r7, #4]
    /* Thread-safe: Directly access the pin registers instead of base->OUT */
    if(0UL == value)
     214:	687b      	ldr	r3, [r7, #4]
     216:	2b00      	cmp	r3, #0
     218:	d105      	bne.n	226 <GPIO_write+0x1e>
    {
        GPIO_PRT_OUT_CLR(base) = CY_GPIO_DR_MASK << pinNum;
     21a:	2201      	movs	r2, #1
     21c:	68bb      	ldr	r3, [r7, #8]
     21e:	409a      	lsls	r2, r3
     220:	68fb      	ldr	r3, [r7, #12]
     222:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    else
    {
        GPIO_PRT_OUT_SET(base) = CY_GPIO_DR_MASK << pinNum;
    }
}
     224:	e004      	b.n	230 <GPIO_write+0x28>
        GPIO_PRT_OUT_SET(base) = CY_GPIO_DR_MASK << pinNum;
     226:	2201      	movs	r2, #1
     228:	68bb      	ldr	r3, [r7, #8]
     22a:	409a      	lsls	r2, r3
     22c:	68fb      	ldr	r3, [r7, #12]
     22e:	641a      	str	r2, [r3, #64]	@ 0x40
}
     230:	46c0      	nop			@ (mov r8, r8)
     232:	46bd      	mov	sp, r7
     234:	b004      	add	sp, #16
     236:	bd80      	pop	{r7, pc}

00000238 <GPIO_Read>:

uint32_t GPIO_Read(GPIO_PRT_Type* base, uint32_t pinNum)
{
     238:	b580      	push	{r7, lr}
     23a:	b082      	sub	sp, #8
     23c:	af00      	add	r7, sp, #0
     23e:	6078      	str	r0, [r7, #4]
     240:	6039      	str	r1, [r7, #0]
    return (GPIO_PRT_IN(base) >> (pinNum)) & CY_GPIO_PS_MASK;
     242:	687b      	ldr	r3, [r7, #4]
     244:	685a      	ldr	r2, [r3, #4]
     246:	683b      	ldr	r3, [r7, #0]
     248:	40da      	lsrs	r2, r3
     24a:	0013      	movs	r3, r2
     24c:	2201      	movs	r2, #1
     24e:	4013      	ands	r3, r2
}
     250:	0018      	movs	r0, r3
     252:	46bd      	mov	sp, r7
     254:	b002      	add	sp, #8
     256:	bd80      	pop	{r7, pc}

00000258 <GPIO_Set>:


void GPIO_Set(GPIO_PRT_Type* base, uint32_t pinNum)
{
     258:	b580      	push	{r7, lr}
     25a:	b082      	sub	sp, #8
     25c:	af00      	add	r7, sp, #0
     25e:	6078      	str	r0, [r7, #4]
     260:	6039      	str	r1, [r7, #0]

    GPIO_PRT_OUT_SET(base) = CY_GPIO_DR_MASK << pinNum;
     262:	2201      	movs	r2, #1
     264:	683b      	ldr	r3, [r7, #0]
     266:	409a      	lsls	r2, r3
     268:	687b      	ldr	r3, [r7, #4]
     26a:	641a      	str	r2, [r3, #64]	@ 0x40
}
     26c:	46c0      	nop			@ (mov r8, r8)
     26e:	46bd      	mov	sp, r7
     270:	b002      	add	sp, #8
     272:	bd80      	pop	{r7, pc}

00000274 <GPIO_Clr>:

void GPIO_Clr(GPIO_PRT_Type* base, uint32_t pinNum)
{
     274:	b580      	push	{r7, lr}
     276:	b082      	sub	sp, #8
     278:	af00      	add	r7, sp, #0
     27a:	6078      	str	r0, [r7, #4]
     27c:	6039      	str	r1, [r7, #0]
    GPIO_PRT_OUT_CLR(base) = CY_GPIO_DR_MASK << pinNum;
     27e:	2201      	movs	r2, #1
     280:	683b      	ldr	r3, [r7, #0]
     282:	409a      	lsls	r2, r3
     284:	687b      	ldr	r3, [r7, #4]
     286:	645a      	str	r2, [r3, #68]	@ 0x44
}
     288:	46c0      	nop			@ (mov r8, r8)
     28a:	46bd      	mov	sp, r7
     28c:	b002      	add	sp, #8
     28e:	bd80      	pop	{r7, pc}

00000290 <GPIO_Inv>:

void GPIO_Inv(GPIO_PRT_Type* base, uint32_t pinNum)
{
     290:	b580      	push	{r7, lr}
     292:	b082      	sub	sp, #8
     294:	af00      	add	r7, sp, #0
     296:	6078      	str	r0, [r7, #4]
     298:	6039      	str	r1, [r7, #0]

    GPIO_PRT_OUT_INV(base) = CY_GPIO_DR_MASK << pinNum;
     29a:	2201      	movs	r2, #1
     29c:	683b      	ldr	r3, [r7, #0]
     29e:	409a      	lsls	r2, r3
     2a0:	687b      	ldr	r3, [r7, #4]
     2a2:	649a      	str	r2, [r3, #72]	@ 0x48
}
     2a4:	46c0      	nop			@ (mov r8, r8)
     2a6:	46bd      	mov	sp, r7
     2a8:	b002      	add	sp, #8
     2aa:	bd80      	pop	{r7, pc}

000002ac <gpio_init>:

void gpio_init(GPIO_PRT_Type* base, const cy_stc_gpio_prt_config_t *config)
{
     2ac:	b580      	push	{r7, lr}
     2ae:	b084      	sub	sp, #16
     2b0:	af00      	add	r7, sp, #0
     2b2:	6078      	str	r0, [r7, #4]
     2b4:	6039      	str	r1, [r7, #0]
        uint32_t portNum;
        HSIOM_PRT_Type* baseHSIOM;

        portNum = ((uint32_t)(base) - 0x40040000UL) / 0x00000100UL;
     2b6:	687b      	ldr	r3, [r7, #4]
     2b8:	4a0f      	ldr	r2, [pc, #60]	@ (2f8 <gpio_init+0x4c>)
     2ba:	4694      	mov	ip, r2
     2bc:	4463      	add	r3, ip
     2be:	0a1b      	lsrs	r3, r3, #8
     2c0:	60fb      	str	r3, [r7, #12]
        baseHSIOM = (HSIOM_PRT_Type*)(0x40020000UL + (0x00000100UL * portNum));
     2c2:	68fb      	ldr	r3, [r7, #12]
     2c4:	4a0d      	ldr	r2, [pc, #52]	@ (2fc <gpio_init+0x50>)
     2c6:	4694      	mov	ip, r2
     2c8:	4463      	add	r3, ip
     2ca:	021b      	lsls	r3, r3, #8
     2cc:	60bb      	str	r3, [r7, #8]

        (((GPIO_PRT_Type*)(base))->DR)              = config->dr;
     2ce:	683b      	ldr	r3, [r7, #0]
     2d0:	681a      	ldr	r2, [r3, #0]
     2d2:	687b      	ldr	r3, [r7, #4]
     2d4:	601a      	str	r2, [r3, #0]
        (((GPIO_PRT_Type*)(base))->PC)             = config->pc;
     2d6:	683b      	ldr	r3, [r7, #0]
     2d8:	689a      	ldr	r2, [r3, #8]
     2da:	687b      	ldr	r3, [r7, #4]
     2dc:	609a      	str	r2, [r3, #8]
        (((GPIO_PRT_Type*)(base))->PC2)             = config->pc2;
     2de:	683b      	ldr	r3, [r7, #0]
     2e0:	68da      	ldr	r2, [r3, #12]
     2e2:	687b      	ldr	r3, [r7, #4]
     2e4:	619a      	str	r2, [r3, #24]
        (((HSIOM_PRT_Type *)(baseHSIOM))->PORT_SEL)  = config->selActive;
     2e6:	683b      	ldr	r3, [r7, #0]
     2e8:	691a      	ldr	r2, [r3, #16]
     2ea:	68bb      	ldr	r3, [r7, #8]
     2ec:	601a      	str	r2, [r3, #0]
}
     2ee:	46c0      	nop			@ (mov r8, r8)
     2f0:	46bd      	mov	sp, r7
     2f2:	b004      	add	sp, #16
     2f4:	bd80      	pop	{r7, pc}
     2f6:	46c0      	nop			@ (mov r8, r8)
     2f8:	bffc0000 	.word	0xbffc0000
     2fc:	00400200 	.word	0x00400200

00000300 <GPIO_Pin_Init>:

void GPIO_Pin_Init(GPIO_PRT_Type *base, uint32_t pinNum, const cy_stc_gpio_pin_config_t *config, uint8_t hsiom)
{
     300:	b580      	push	{r7, lr}
     302:	b084      	sub	sp, #16
     304:	af00      	add	r7, sp, #0
     306:	60f8      	str	r0, [r7, #12]
     308:	60b9      	str	r1, [r7, #8]
     30a:	607a      	str	r2, [r7, #4]
     30c:	001a      	movs	r2, r3
     30e:	1cfb      	adds	r3, r7, #3
     310:	701a      	strb	r2, [r3, #0]
        GPIO_write(base, pinNum, config->outVal);
     312:	687b      	ldr	r3, [r7, #4]
     314:	681a      	ldr	r2, [r3, #0]
     316:	68b9      	ldr	r1, [r7, #8]
     318:	68fb      	ldr	r3, [r7, #12]
     31a:	0018      	movs	r0, r3
     31c:	f7ff ff74 	bl	208 <GPIO_write>
        GPIO_SetDrivemode(base, pinNum, config->driveMode);
     320:	687b      	ldr	r3, [r7, #4]
     322:	685a      	ldr	r2, [r3, #4]
     324:	68b9      	ldr	r1, [r7, #8]
     326:	68fb      	ldr	r3, [r7, #12]
     328:	0018      	movs	r0, r3
     32a:	f000 f851 	bl	3d0 <GPIO_SetDrivemode>
        GPIO_SetHSIOM(base, pinNum, hsiom);
     32e:	1cfb      	adds	r3, r7, #3
     330:	781a      	ldrb	r2, [r3, #0]
     332:	68b9      	ldr	r1, [r7, #8]
     334:	68fb      	ldr	r3, [r7, #12]
     336:	0018      	movs	r0, r3
     338:	f000 f819 	bl	36e <GPIO_SetHSIOM>

        GPIO_SetInterruptEdge(base, pinNum, config->intEdge);
     33c:	687b      	ldr	r3, [r7, #4]
     33e:	689a      	ldr	r2, [r3, #8]
     340:	68b9      	ldr	r1, [r7, #8]
     342:	68fb      	ldr	r3, [r7, #12]
     344:	0018      	movs	r0, r3
     346:	f000 f877 	bl	438 <GPIO_SetInterruptEdge>
        GPIO_SetVtrip(base, config->vtrip);
     34a:	687b      	ldr	r3, [r7, #4]
     34c:	68da      	ldr	r2, [r3, #12]
     34e:	68fb      	ldr	r3, [r7, #12]
     350:	0011      	movs	r1, r2
     352:	0018      	movs	r0, r3
     354:	f000 f88f 	bl	476 <GPIO_SetVtrip>
        GPIO_SetSlewRate(base, config->slewRate);
     358:	687b      	ldr	r3, [r7, #4]
     35a:	691a      	ldr	r2, [r3, #16]
     35c:	68fb      	ldr	r3, [r7, #12]
     35e:	0011      	movs	r1, r2
     360:	0018      	movs	r0, r3
     362:	f000 f8a1 	bl	4a8 <GPIO_SetSlewRate>
}
     366:	46c0      	nop			@ (mov r8, r8)
     368:	46bd      	mov	sp, r7
     36a:	b004      	add	sp, #16
     36c:	bd80      	pop	{r7, pc}

0000036e <GPIO_SetHSIOM>:

void GPIO_SetHSIOM(const GPIO_PRT_Type* base, uint32_t pinNum, uint8_t value)
{
     36e:	b580      	push	{r7, lr}
     370:	b088      	sub	sp, #32
     372:	af00      	add	r7, sp, #0
     374:	60f8      	str	r0, [r7, #12]
     376:	60b9      	str	r1, [r7, #8]
     378:	1dfb      	adds	r3, r7, #7
     37a:	701a      	strb	r2, [r3, #0]
    uint32_t portNum;
    uint32_t tempReg;
    HSIOM_PRT_Type* portAddrHSIOM;

    portNum = ((uint32_t)(base) - 0x40040000UL) / 0x00000100UL;
     37c:	68fb      	ldr	r3, [r7, #12]
     37e:	4a12      	ldr	r2, [pc, #72]	@ (3c8 <GPIO_SetHSIOM+0x5a>)
     380:	4694      	mov	ip, r2
     382:	4463      	add	r3, ip
     384:	0a1b      	lsrs	r3, r3, #8
     386:	61fb      	str	r3, [r7, #28]
    portAddrHSIOM = (HSIOM_PRT_Type*)(0x40020000UL + (0x00000100UL * portNum));
     388:	69fb      	ldr	r3, [r7, #28]
     38a:	4a10      	ldr	r2, [pc, #64]	@ (3cc <GPIO_SetHSIOM+0x5e>)
     38c:	4694      	mov	ip, r2
     38e:	4463      	add	r3, ip
     390:	021b      	lsls	r3, r3, #8
     392:	61bb      	str	r3, [r7, #24]

    tempReg = (((HSIOM_PRT_Type *)(portAddrHSIOM))->PORT_SEL) & ~(CY_GPIO_HSIOM_MASK << (pinNum << CY_GPIO_HSIOM_OFFSET));
     394:	69bb      	ldr	r3, [r7, #24]
     396:	681b      	ldr	r3, [r3, #0]
     398:	68ba      	ldr	r2, [r7, #8]
     39a:	0092      	lsls	r2, r2, #2
     39c:	210f      	movs	r1, #15
     39e:	4091      	lsls	r1, r2
     3a0:	000a      	movs	r2, r1
     3a2:	43d2      	mvns	r2, r2
     3a4:	4013      	ands	r3, r2
     3a6:	617b      	str	r3, [r7, #20]
    (((HSIOM_PRT_Type *)(portAddrHSIOM))->PORT_SEL) = tempReg | (( (uint32_t) value & CY_GPIO_HSIOM_MASK) << (pinNum << CY_GPIO_HSIOM_OFFSET));
     3a8:	1dfb      	adds	r3, r7, #7
     3aa:	781b      	ldrb	r3, [r3, #0]
     3ac:	220f      	movs	r2, #15
     3ae:	401a      	ands	r2, r3
     3b0:	68bb      	ldr	r3, [r7, #8]
     3b2:	009b      	lsls	r3, r3, #2
     3b4:	409a      	lsls	r2, r3
     3b6:	697b      	ldr	r3, [r7, #20]
     3b8:	431a      	orrs	r2, r3
     3ba:	69bb      	ldr	r3, [r7, #24]
     3bc:	601a      	str	r2, [r3, #0]
}
     3be:	46c0      	nop			@ (mov r8, r8)
     3c0:	46bd      	mov	sp, r7
     3c2:	b008      	add	sp, #32
     3c4:	bd80      	pop	{r7, pc}
     3c6:	46c0      	nop			@ (mov r8, r8)
     3c8:	bffc0000 	.word	0xbffc0000
     3cc:	00400200 	.word	0x00400200

000003d0 <GPIO_SetDrivemode>:

void GPIO_SetDrivemode(GPIO_PRT_Type* base, uint32_t pinNum, uint32_t value)
{
     3d0:	b580      	push	{r7, lr}
     3d2:	b086      	sub	sp, #24
     3d4:	af00      	add	r7, sp, #0
     3d6:	60f8      	str	r0, [r7, #12]
     3d8:	60b9      	str	r1, [r7, #8]
     3da:	607a      	str	r2, [r7, #4]
    uint32_t tempReg;
    uint32_t pinLoc;

    pinLoc = pinNum * CY_GPIO_DRIVE_MODE_OFFSET;
     3dc:	68ba      	ldr	r2, [r7, #8]
     3de:	0013      	movs	r3, r2
     3e0:	005b      	lsls	r3, r3, #1
     3e2:	189b      	adds	r3, r3, r2
     3e4:	617b      	str	r3, [r7, #20]
    tempReg = ((((GPIO_PRT_Type*)(base))->PC) & ~(CY_GPIO_PC_DM_MASK << pinLoc));
     3e6:	68fb      	ldr	r3, [r7, #12]
     3e8:	689b      	ldr	r3, [r3, #8]
     3ea:	2107      	movs	r1, #7
     3ec:	697a      	ldr	r2, [r7, #20]
     3ee:	4091      	lsls	r1, r2
     3f0:	000a      	movs	r2, r1
     3f2:	43d2      	mvns	r2, r2
     3f4:	4013      	ands	r3, r2
     3f6:	613b      	str	r3, [r7, #16]
    (((GPIO_PRT_Type*)(base))->PC) = tempReg | ((value & CY_GPIO_PC_DM_MASK) << pinLoc);
     3f8:	687b      	ldr	r3, [r7, #4]
     3fa:	2207      	movs	r2, #7
     3fc:	401a      	ands	r2, r3
     3fe:	697b      	ldr	r3, [r7, #20]
     400:	409a      	lsls	r2, r3
     402:	693b      	ldr	r3, [r7, #16]
     404:	431a      	orrs	r2, r3
     406:	68fb      	ldr	r3, [r7, #12]
     408:	609a      	str	r2, [r3, #8]

    tempReg = ((((GPIO_PRT_Type*)(base))->PC2) & ~(CY_GPIO_PC_DM_IBUF_MASK << pinNum));
     40a:	68fb      	ldr	r3, [r7, #12]
     40c:	699b      	ldr	r3, [r3, #24]
     40e:	2101      	movs	r1, #1
     410:	68ba      	ldr	r2, [r7, #8]
     412:	4091      	lsls	r1, r2
     414:	000a      	movs	r2, r1
     416:	43d2      	mvns	r2, r2
     418:	4013      	ands	r3, r2
     41a:	613b      	str	r3, [r7, #16]
    (((GPIO_PRT_Type*)(base))->PC2) = tempReg | (((value & CY_GPIO_DM_VAL_IBUF_DISABLE_MASK) >> CY_GPIO_DRIVE_MODE_OFFSET) << pinNum);
     41c:	687b      	ldr	r3, [r7, #4]
     41e:	08db      	lsrs	r3, r3, #3
     420:	2201      	movs	r2, #1
     422:	401a      	ands	r2, r3
     424:	68bb      	ldr	r3, [r7, #8]
     426:	409a      	lsls	r2, r3
     428:	693b      	ldr	r3, [r7, #16]
     42a:	431a      	orrs	r2, r3
     42c:	68fb      	ldr	r3, [r7, #12]
     42e:	619a      	str	r2, [r3, #24]
}
     430:	46c0      	nop			@ (mov r8, r8)
     432:	46bd      	mov	sp, r7
     434:	b006      	add	sp, #24
     436:	bd80      	pop	{r7, pc}

00000438 <GPIO_SetInterruptEdge>:

void GPIO_SetInterruptEdge(GPIO_PRT_Type* base, uint32_t pinNum, uint32_t value)
{
     438:	b580      	push	{r7, lr}
     43a:	b086      	sub	sp, #24
     43c:	af00      	add	r7, sp, #0
     43e:	60f8      	str	r0, [r7, #12]
     440:	60b9      	str	r1, [r7, #8]
     442:	607a      	str	r2, [r7, #4]
    uint32_t tempReg;
    uint32_t pinLoc;

    pinLoc = pinNum << 0x1u;
     444:	68bb      	ldr	r3, [r7, #8]
     446:	005b      	lsls	r3, r3, #1
     448:	617b      	str	r3, [r7, #20]
    tempReg = (((GPIO_PRT_Type*)(base))->INTR_CFG) & ~(0x3u << pinLoc);
     44a:	68fb      	ldr	r3, [r7, #12]
     44c:	68db      	ldr	r3, [r3, #12]
     44e:	2103      	movs	r1, #3
     450:	697a      	ldr	r2, [r7, #20]
     452:	4091      	lsls	r1, r2
     454:	000a      	movs	r2, r1
     456:	43d2      	mvns	r2, r2
     458:	4013      	ands	r3, r2
     45a:	613b      	str	r3, [r7, #16]
    (((GPIO_PRT_Type*)(base))->INTR_CFG) = tempReg | ((value & 0x3u) << pinLoc);
     45c:	687b      	ldr	r3, [r7, #4]
     45e:	2203      	movs	r2, #3
     460:	401a      	ands	r2, r3
     462:	697b      	ldr	r3, [r7, #20]
     464:	409a      	lsls	r2, r3
     466:	693b      	ldr	r3, [r7, #16]
     468:	431a      	orrs	r2, r3
     46a:	68fb      	ldr	r3, [r7, #12]
     46c:	60da      	str	r2, [r3, #12]
}
     46e:	46c0      	nop			@ (mov r8, r8)
     470:	46bd      	mov	sp, r7
     472:	b006      	add	sp, #24
     474:	bd80      	pop	{r7, pc}

00000476 <GPIO_SetVtrip>:

void GPIO_SetVtrip(GPIO_PRT_Type* base, uint32_t value)
{
     476:	b580      	push	{r7, lr}
     478:	b084      	sub	sp, #16
     47a:	af00      	add	r7, sp, #0
     47c:	6078      	str	r0, [r7, #4]
     47e:	6039      	str	r1, [r7, #0]
    uint32_t tempReg;

    tempReg = (((GPIO_PRT_Type*)(base))->PC) & ~(0x1u << 24u);
     480:	687b      	ldr	r3, [r7, #4]
     482:	689b      	ldr	r3, [r3, #8]
     484:	4a07      	ldr	r2, [pc, #28]	@ (4a4 <GPIO_SetVtrip+0x2e>)
     486:	4013      	ands	r3, r2
     488:	60fb      	str	r3, [r7, #12]
    (((GPIO_PRT_Type*)(base))->PC) = tempReg | ((value & 0x1u) << 24);
     48a:	683b      	ldr	r3, [r7, #0]
     48c:	061a      	lsls	r2, r3, #24
     48e:	2380      	movs	r3, #128	@ 0x80
     490:	045b      	lsls	r3, r3, #17
     492:	401a      	ands	r2, r3
     494:	68fb      	ldr	r3, [r7, #12]
     496:	431a      	orrs	r2, r3
     498:	687b      	ldr	r3, [r7, #4]
     49a:	609a      	str	r2, [r3, #8]

}
     49c:	46c0      	nop			@ (mov r8, r8)
     49e:	46bd      	mov	sp, r7
     4a0:	b004      	add	sp, #16
     4a2:	bd80      	pop	{r7, pc}
     4a4:	feffffff 	.word	0xfeffffff

000004a8 <GPIO_SetSlewRate>:

void GPIO_SetSlewRate(GPIO_PRT_Type* base, uint32_t value)
{
     4a8:	b580      	push	{r7, lr}
     4aa:	b084      	sub	sp, #16
     4ac:	af00      	add	r7, sp, #0
     4ae:	6078      	str	r0, [r7, #4]
     4b0:	6039      	str	r1, [r7, #0]
    uint32_t tempReg;

    tempReg = (((GPIO_PRT_Type*)(base))->PC) & ~(0x1u << 25u);
     4b2:	687b      	ldr	r3, [r7, #4]
     4b4:	689b      	ldr	r3, [r3, #8]
     4b6:	4a08      	ldr	r2, [pc, #32]	@ (4d8 <GPIO_SetSlewRate+0x30>)
     4b8:	4013      	ands	r3, r2
     4ba:	60fb      	str	r3, [r7, #12]
    (((GPIO_PRT_Type*)(base))->PC) = tempReg | ((value & 0x1u) << 25);
     4bc:	683b      	ldr	r3, [r7, #0]
     4be:	065a      	lsls	r2, r3, #25
     4c0:	2380      	movs	r3, #128	@ 0x80
     4c2:	049b      	lsls	r3, r3, #18
     4c4:	401a      	ands	r2, r3
     4c6:	68fb      	ldr	r3, [r7, #12]
     4c8:	431a      	orrs	r2, r3
     4ca:	687b      	ldr	r3, [r7, #4]
     4cc:	609a      	str	r2, [r3, #8]

}
     4ce:	46c0      	nop			@ (mov r8, r8)
     4d0:	46bd      	mov	sp, r7
     4d2:	b004      	add	sp, #16
     4d4:	bd80      	pop	{r7, pc}
     4d6:	46c0      	nop			@ (mov r8, r8)
     4d8:	fdffffff 	.word	0xfdffffff

000004dc <GPIO_ClearInterrupt>:

void GPIO_ClearInterrupt(GPIO_PRT_Type* base, uint32_t pinNum)
{
     4dc:	b580      	push	{r7, lr}
     4de:	b082      	sub	sp, #8
     4e0:	af00      	add	r7, sp, #0
     4e2:	6078      	str	r0, [r7, #4]
     4e4:	6039      	str	r1, [r7, #0]
    /* Any INTR MMIO registers AHB clearing must be preceded with an AHB read access */
    (void)(((GPIO_PRT_Type*)(base))->INTR);
     4e6:	687b      	ldr	r3, [r7, #4]
     4e8:	691b      	ldr	r3, [r3, #16]

    (((GPIO_PRT_Type*)(base))->INTR) = (0x01UL) << pinNum;
     4ea:	2201      	movs	r2, #1
     4ec:	683b      	ldr	r3, [r7, #0]
     4ee:	409a      	lsls	r2, r3
     4f0:	687b      	ldr	r3, [r7, #4]
     4f2:	611a      	str	r2, [r3, #16]

    /* This read ensures that the initial write has been flushed out to the hardware */
    (void)(((GPIO_PRT_Type*)(base))->INTR);
     4f4:	687b      	ldr	r3, [r7, #4]
     4f6:	691b      	ldr	r3, [r3, #16]
}
     4f8:	46c0      	nop			@ (mov r8, r8)
     4fa:	46bd      	mov	sp, r7
     4fc:	b002      	add	sp, #8
     4fe:	bd80      	pop	{r7, pc}

00000500 <TCPWM_Counter_Init>:
#include <stdint.h>
#include "timer.h"

void TCPWM_Counter_Init(TCPWM_Type *base, uint32_t cntNum, cy_stc_tcpwm_counter_config_t const *config)
{
     500:	b580      	push	{r7, lr}
     502:	b084      	sub	sp, #16
     504:	af00      	add	r7, sp, #0
     506:	60f8      	str	r0, [r7, #12]
     508:	60b9      	str	r1, [r7, #8]
     50a:	607a      	str	r2, [r7, #4]

        TCPWM_CNT_CTRL(base, cntNum) = ((((uint32_t)(config->clockPrescaler) << TCPWM_CNT_CTRL_GENERIC_Pos) & TCPWM_CNT_CTRL_GENERIC_Msk) |
     50c:	687b      	ldr	r3, [r7, #4]
     50e:	685b      	ldr	r3, [r3, #4]
     510:	021b      	lsls	r3, r3, #8
     512:	041b      	lsls	r3, r3, #16
     514:	0c1a      	lsrs	r2, r3, #16
                                      (((uint32_t)(config->runMode) << TCPWM_CNT_CTRL_ONE_SHOT_Pos) & TCPWM_CNT_CTRL_ONE_SHOT_Msk) |
     516:	687b      	ldr	r3, [r7, #4]
     518:	689b      	ldr	r3, [r3, #8]
     51a:	0499      	lsls	r1, r3, #18
     51c:	2380      	movs	r3, #128	@ 0x80
     51e:	02db      	lsls	r3, r3, #11
     520:	400b      	ands	r3, r1
        TCPWM_CNT_CTRL(base, cntNum) = ((((uint32_t)(config->clockPrescaler) << TCPWM_CNT_CTRL_GENERIC_Pos) & TCPWM_CNT_CTRL_GENERIC_Msk) |
     522:	431a      	orrs	r2, r3
                                      (((uint32_t)(config->countDirection) << TCPWM_CNT_CTRL_UP_DOWN_MODE_Pos) & TCPWM_CNT_CTRL_UP_DOWN_MODE_Msk) |
     524:	687b      	ldr	r3, [r7, #4]
     526:	68db      	ldr	r3, [r3, #12]
     528:	0419      	lsls	r1, r3, #16
     52a:	23c0      	movs	r3, #192	@ 0xc0
     52c:	029b      	lsls	r3, r3, #10
     52e:	400b      	ands	r3, r1
                                      (((uint32_t)(config->runMode) << TCPWM_CNT_CTRL_ONE_SHOT_Pos) & TCPWM_CNT_CTRL_ONE_SHOT_Msk) |
     530:	431a      	orrs	r2, r3
                                      (((uint32_t)(config->compareOrCapture) << TCPWM_CNT_CTRL_MODE_Pos) & TCPWM_CNT_CTRL_MODE_Msk) |
     532:	687b      	ldr	r3, [r7, #4]
     534:	691b      	ldr	r3, [r3, #16]
     536:	0619      	lsls	r1, r3, #24
     538:	23e0      	movs	r3, #224	@ 0xe0
     53a:	04db      	lsls	r3, r3, #19
     53c:	400b      	ands	r3, r1
                                      (((uint32_t)(config->countDirection) << TCPWM_CNT_CTRL_UP_DOWN_MODE_Pos) & TCPWM_CNT_CTRL_UP_DOWN_MODE_Msk) |
     53e:	431a      	orrs	r2, r3
                                      (config->enableCompareSwap ? TCPWM_CNT_CTRL_AUTO_RELOAD_CC_Msk : 0UL));
     540:	687b      	ldr	r3, [r7, #4]
     542:	7f1b      	ldrb	r3, [r3, #28]
     544:	2b00      	cmp	r3, #0
     546:	d001      	beq.n	54c <TCPWM_Counter_Init+0x4c>
     548:	2301      	movs	r3, #1
     54a:	e000      	b.n	54e <TCPWM_Counter_Init+0x4e>
     54c:	2300      	movs	r3, #0
                                      (((uint32_t)(config->compareOrCapture) << TCPWM_CNT_CTRL_MODE_Pos) & TCPWM_CNT_CTRL_MODE_Msk) |
     54e:	4313      	orrs	r3, r2
     550:	0019      	movs	r1, r3
        TCPWM_CNT_CTRL(base, cntNum) = ((((uint32_t)(config->clockPrescaler) << TCPWM_CNT_CTRL_GENERIC_Pos) & TCPWM_CNT_CTRL_GENERIC_Msk) |
     552:	68fb      	ldr	r3, [r7, #12]
     554:	68ba      	ldr	r2, [r7, #8]
     556:	3204      	adds	r2, #4
     558:	0192      	lsls	r2, r2, #6
     55a:	50d1      	str	r1, [r2, r3]

        if (0u == config->countDirection)//Count UP
     55c:	687b      	ldr	r3, [r7, #4]
     55e:	68db      	ldr	r3, [r3, #12]
     560:	2b00      	cmp	r3, #0
     562:	d109      	bne.n	578 <TCPWM_Counter_Init+0x78>
        {
            TCPWM_CNT_COUNTER(base, cntNum) = 0U;
     564:	68f9      	ldr	r1, [r7, #12]
     566:	68ba      	ldr	r2, [r7, #8]
     568:	2384      	movs	r3, #132	@ 0x84
     56a:	005b      	lsls	r3, r3, #1
     56c:	0192      	lsls	r2, r2, #6
     56e:	188a      	adds	r2, r1, r2
     570:	18d3      	adds	r3, r2, r3
     572:	2200      	movs	r2, #0
     574:	601a      	str	r2, [r3, #0]
     576:	e017      	b.n	5a8 <TCPWM_Counter_Init+0xa8>
        }
        else if (1U == config->countDirection) //Count Down
     578:	687b      	ldr	r3, [r7, #4]
     57a:	68db      	ldr	r3, [r3, #12]
     57c:	2b01      	cmp	r3, #1
     57e:	d10a      	bne.n	596 <TCPWM_Counter_Init+0x96>
        {
            TCPWM_CNT_COUNTER(base, cntNum) = config->period;
     580:	687b      	ldr	r3, [r7, #4]
     582:	681a      	ldr	r2, [r3, #0]
     584:	68f8      	ldr	r0, [r7, #12]
     586:	68b9      	ldr	r1, [r7, #8]
     588:	2384      	movs	r3, #132	@ 0x84
     58a:	005b      	lsls	r3, r3, #1
     58c:	0189      	lsls	r1, r1, #6
     58e:	1841      	adds	r1, r0, r1
     590:	18cb      	adds	r3, r1, r3
     592:	601a      	str	r2, [r3, #0]
     594:	e008      	b.n	5a8 <TCPWM_Counter_Init+0xa8>
        }
        else
        {
            TCPWM_CNT_COUNTER(base, cntNum) = 1U;
     596:	68f9      	ldr	r1, [r7, #12]
     598:	68ba      	ldr	r2, [r7, #8]
     59a:	2384      	movs	r3, #132	@ 0x84
     59c:	005b      	lsls	r3, r3, #1
     59e:	0192      	lsls	r2, r2, #6
     5a0:	188a      	adds	r2, r1, r2
     5a2:	18d3      	adds	r3, r2, r3
     5a4:	2201      	movs	r2, #1
     5a6:	601a      	str	r2, [r3, #0]
        }

        if (0u == config->compareOrCapture) //Compare
     5a8:	687b      	ldr	r3, [r7, #4]
     5aa:	691b      	ldr	r3, [r3, #16]
     5ac:	2b00      	cmp	r3, #0
     5ae:	d113      	bne.n	5d8 <TCPWM_Counter_Init+0xd8>
        {
            TCPWM_CNT_CC(base, cntNum) = config->compare0;
     5b0:	687b      	ldr	r3, [r7, #4]
     5b2:	695a      	ldr	r2, [r3, #20]
     5b4:	68f8      	ldr	r0, [r7, #12]
     5b6:	68b9      	ldr	r1, [r7, #8]
     5b8:	2386      	movs	r3, #134	@ 0x86
     5ba:	005b      	lsls	r3, r3, #1
     5bc:	0189      	lsls	r1, r1, #6
     5be:	1841      	adds	r1, r0, r1
     5c0:	18cb      	adds	r3, r1, r3
     5c2:	601a      	str	r2, [r3, #0]
            TCPWM_CNT_CC_BUFF(base, cntNum) = config->compare1;
     5c4:	687b      	ldr	r3, [r7, #4]
     5c6:	699a      	ldr	r2, [r3, #24]
     5c8:	68f8      	ldr	r0, [r7, #12]
     5ca:	68b9      	ldr	r1, [r7, #8]
     5cc:	2388      	movs	r3, #136	@ 0x88
     5ce:	005b      	lsls	r3, r3, #1
     5d0:	0189      	lsls	r1, r1, #6
     5d2:	1841      	adds	r1, r0, r1
     5d4:	18cb      	adds	r3, r1, r3
     5d6:	601a      	str	r2, [r3, #0]
        }

        TCPWM_CNT_PERIOD(base, cntNum) = config->period;
     5d8:	687b      	ldr	r3, [r7, #4]
     5da:	681a      	ldr	r2, [r3, #0]
     5dc:	68f8      	ldr	r0, [r7, #12]
     5de:	68b9      	ldr	r1, [r7, #8]
     5e0:	238a      	movs	r3, #138	@ 0x8a
     5e2:	005b      	lsls	r3, r3, #1
     5e4:	0189      	lsls	r1, r1, #6
     5e6:	1841      	adds	r1, r0, r1
     5e8:	18cb      	adds	r3, r1, r3
     5ea:	601a      	str	r2, [r3, #0]

        TCPWM_CNT_TR_CTRL0(base, cntNum) = ((((uint32_t)(config->captureInput) << TCPWM_CNT_TR_CTRL0_CAPTURE_SEL_Pos) & TCPWM_CNT_TR_CTRL0_CAPTURE_SEL_Msk) |
     5ec:	687b      	ldr	r3, [r7, #4]
     5ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
     5f0:	220f      	movs	r2, #15
     5f2:	401a      	ands	r2, r3
                                            (((uint32_t)(config->reloadInput) << TCPWM_CNT_TR_CTRL0_RELOAD_SEL_Pos) & TCPWM_CNT_TR_CTRL0_RELOAD_SEL_Msk) |
     5f4:	687b      	ldr	r3, [r7, #4]
     5f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
     5f8:	0219      	lsls	r1, r3, #8
     5fa:	23f0      	movs	r3, #240	@ 0xf0
     5fc:	011b      	lsls	r3, r3, #4
     5fe:	400b      	ands	r3, r1
        TCPWM_CNT_TR_CTRL0(base, cntNum) = ((((uint32_t)(config->captureInput) << TCPWM_CNT_TR_CTRL0_CAPTURE_SEL_Pos) & TCPWM_CNT_TR_CTRL0_CAPTURE_SEL_Msk) |
     600:	431a      	orrs	r2, r3
                                            (((uint32_t)(config->startInput) << TCPWM_CNT_TR_CTRL0_START_SEL_Pos) & TCPWM_CNT_TR_CTRL0_START_SEL_Msk) |
     602:	687b      	ldr	r3, [r7, #4]
     604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
     606:	0419      	lsls	r1, r3, #16
     608:	23f0      	movs	r3, #240	@ 0xf0
     60a:	031b      	lsls	r3, r3, #12
     60c:	400b      	ands	r3, r1
                                            (((uint32_t)(config->reloadInput) << TCPWM_CNT_TR_CTRL0_RELOAD_SEL_Pos) & TCPWM_CNT_TR_CTRL0_RELOAD_SEL_Msk) |
     60e:	431a      	orrs	r2, r3
                                            (((uint32_t)(config->stopInput) << TCPWM_CNT_TR_CTRL0_STOP_SEL_Pos) & TCPWM_CNT_TR_CTRL0_STOP_SEL_Msk) |
     610:	687b      	ldr	r3, [r7, #4]
     612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
     614:	031b      	lsls	r3, r3, #12
     616:	041b      	lsls	r3, r3, #16
     618:	0c1b      	lsrs	r3, r3, #16
                                            (((uint32_t)(config->startInput) << TCPWM_CNT_TR_CTRL0_START_SEL_Pos) & TCPWM_CNT_TR_CTRL0_START_SEL_Msk) |
     61a:	431a      	orrs	r2, r3
                                            (((uint32_t)(config->countInput) << TCPWM_CNT_TR_CTRL0_COUNT_SEL_Pos) & TCPWM_CNT_TR_CTRL0_COUNT_SEL_Msk));
     61c:	687b      	ldr	r3, [r7, #4]
     61e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
     620:	011b      	lsls	r3, r3, #4
     622:	21ff      	movs	r1, #255	@ 0xff
     624:	400b      	ands	r3, r1
                                            (((uint32_t)(config->stopInput) << TCPWM_CNT_TR_CTRL0_STOP_SEL_Pos) & TCPWM_CNT_TR_CTRL0_STOP_SEL_Msk) |
     626:	431a      	orrs	r2, r3
        TCPWM_CNT_TR_CTRL0(base, cntNum) = ((((uint32_t)(config->captureInput) << TCPWM_CNT_TR_CTRL0_CAPTURE_SEL_Pos) & TCPWM_CNT_TR_CTRL0_CAPTURE_SEL_Msk) |
     628:	68f8      	ldr	r0, [r7, #12]
     62a:	68b9      	ldr	r1, [r7, #8]
     62c:	2390      	movs	r3, #144	@ 0x90
     62e:	005b      	lsls	r3, r3, #1
     630:	0189      	lsls	r1, r1, #6
     632:	1841      	adds	r1, r0, r1
     634:	18cb      	adds	r3, r1, r3
     636:	601a      	str	r2, [r3, #0]

        TCPWM_CNT_TR_CTRL1(base, cntNum) = (((uint32_t)(config->captureInputMode) << TCPWM_CNT_TR_CTRL1_CAPTURE_EDGE_Pos) & TCPWM_CNT_TR_CTRL1_CAPTURE_EDGE_Msk) |
     638:	687b      	ldr	r3, [r7, #4]
     63a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
     63c:	2203      	movs	r2, #3
     63e:	401a      	ands	r2, r3
                                        (((uint32_t)(config->reloadInputMode) << TCPWM_CNT_TR_CTRL1_RELOAD_EDGE_Pos) & TCPWM_CNT_TR_CTRL1_RELOAD_EDGE_Msk) |
     640:	687b      	ldr	r3, [r7, #4]
     642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
     644:	011b      	lsls	r3, r3, #4
     646:	2130      	movs	r1, #48	@ 0x30
     648:	400b      	ands	r3, r1
        TCPWM_CNT_TR_CTRL1(base, cntNum) = (((uint32_t)(config->captureInputMode) << TCPWM_CNT_TR_CTRL1_CAPTURE_EDGE_Pos) & TCPWM_CNT_TR_CTRL1_CAPTURE_EDGE_Msk) |
     64a:	431a      	orrs	r2, r3
                                        (((uint32_t)(config->startInputMode) << TCPWM_CNT_TR_CTRL1_START_EDGE_Pos) & TCPWM_CNT_TR_CTRL1_START_EDGE_Msk) |
     64c:	687b      	ldr	r3, [r7, #4]
     64e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
     650:	0219      	lsls	r1, r3, #8
     652:	23c0      	movs	r3, #192	@ 0xc0
     654:	009b      	lsls	r3, r3, #2
     656:	400b      	ands	r3, r1
                                        (((uint32_t)(config->reloadInputMode) << TCPWM_CNT_TR_CTRL1_RELOAD_EDGE_Pos) & TCPWM_CNT_TR_CTRL1_RELOAD_EDGE_Msk) |
     658:	431a      	orrs	r2, r3
                                        (((uint32_t)(config->stopInputMode) << TCPWM_CNT_TR_CTRL1_STOP_EDGE_Pos) & TCPWM_CNT_TR_CTRL1_STOP_EDGE_Msk) |
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
     65e:	019b      	lsls	r3, r3, #6
     660:	21ff      	movs	r1, #255	@ 0xff
     662:	400b      	ands	r3, r1
                                        (((uint32_t)(config->startInputMode) << TCPWM_CNT_TR_CTRL1_START_EDGE_Pos) & TCPWM_CNT_TR_CTRL1_START_EDGE_Msk) |
     664:	431a      	orrs	r2, r3
                                        (((uint32_t)(config->countInputMode) << TCPWM_CNT_TR_CTRL1_COUNT_EDGE_Pos) & TCPWM_CNT_TR_CTRL1_COUNT_EDGE_Msk);
     666:	687b      	ldr	r3, [r7, #4]
     668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
     66a:	009b      	lsls	r3, r3, #2
     66c:	210c      	movs	r1, #12
     66e:	400b      	ands	r3, r1
                                        (((uint32_t)(config->stopInputMode) << TCPWM_CNT_TR_CTRL1_STOP_EDGE_Pos) & TCPWM_CNT_TR_CTRL1_STOP_EDGE_Msk) |
     670:	431a      	orrs	r2, r3
        TCPWM_CNT_TR_CTRL1(base, cntNum) = (((uint32_t)(config->captureInputMode) << TCPWM_CNT_TR_CTRL1_CAPTURE_EDGE_Pos) & TCPWM_CNT_TR_CTRL1_CAPTURE_EDGE_Msk) |
     672:	68f8      	ldr	r0, [r7, #12]
     674:	68b9      	ldr	r1, [r7, #8]
     676:	2392      	movs	r3, #146	@ 0x92
     678:	005b      	lsls	r3, r3, #1
     67a:	0189      	lsls	r1, r1, #6
     67c:	1841      	adds	r1, r0, r1
     67e:	18cb      	adds	r3, r1, r3
     680:	601a      	str	r2, [r3, #0]

        TCPWM_CNT_INTR_MASK(base, cntNum) = config->interruptSources;
     682:	687b      	ldr	r3, [r7, #4]
     684:	6a1a      	ldr	r2, [r3, #32]
     686:	68f8      	ldr	r0, [r7, #12]
     688:	68b9      	ldr	r1, [r7, #8]
     68a:	239c      	movs	r3, #156	@ 0x9c
     68c:	005b      	lsls	r3, r3, #1
     68e:	0189      	lsls	r1, r1, #6
     690:	1841      	adds	r1, r0, r1
     692:	18cb      	adds	r3, r1, r3
     694:	601a      	str	r2, [r3, #0]

}
     696:	46c0      	nop			@ (mov r8, r8)
     698:	46bd      	mov	sp, r7
     69a:	b004      	add	sp, #16
     69c:	bd80      	pop	{r7, pc}

0000069e <TCPWM_PWM_Init>:

void TCPWM_PWM_Init(TCPWM_Type *base, uint32_t cntNum,  cy_stc_tcpwm_pwm_config_t const *config)
{
     69e:	b580      	push	{r7, lr}
     6a0:	b084      	sub	sp, #16
     6a2:	af00      	add	r7, sp, #0
     6a4:	60f8      	str	r0, [r7, #12]
     6a6:	60b9      	str	r1, [r7, #8]
     6a8:	607a      	str	r2, [r7, #4]
        TCPWM_CNT_CTRL(base, cntNum) = ((config->enableCompareSwap ? TCPWM_CNT_CTRL_AUTO_RELOAD_CC_Msk : 0UL) |
     6aa:	687b      	ldr	r3, [r7, #4]
     6ac:	2228      	movs	r2, #40	@ 0x28
     6ae:	5c9b      	ldrb	r3, [r3, r2]
     6b0:	2b00      	cmp	r3, #0
     6b2:	d001      	beq.n	6b8 <TCPWM_PWM_Init+0x1a>
     6b4:	2201      	movs	r2, #1
     6b6:	e000      	b.n	6ba <TCPWM_PWM_Init+0x1c>
     6b8:	2200      	movs	r2, #0
                                      (config->enablePeriodSwap ? TCPWM_CNT_CTRL_AUTO_RELOAD_PERIOD_Msk : 0UL) |
     6ba:	687b      	ldr	r3, [r7, #4]
     6bc:	7f1b      	ldrb	r3, [r3, #28]
     6be:	2b00      	cmp	r3, #0
     6c0:	d001      	beq.n	6c6 <TCPWM_PWM_Init+0x28>
     6c2:	2302      	movs	r3, #2
     6c4:	e000      	b.n	6c8 <TCPWM_PWM_Init+0x2a>
     6c6:	2300      	movs	r3, #0
        TCPWM_CNT_CTRL(base, cntNum) = ((config->enableCompareSwap ? TCPWM_CNT_CTRL_AUTO_RELOAD_CC_Msk : 0UL) |
     6c8:	431a      	orrs	r2, r3
                                      (((uint32_t)(config->runMode) << TCPWM_CNT_CTRL_ONE_SHOT_Pos) & TCPWM_CNT_CTRL_ONE_SHOT_Msk) |
     6ca:	687b      	ldr	r3, [r7, #4]
     6cc:	691b      	ldr	r3, [r3, #16]
     6ce:	0499      	lsls	r1, r3, #18
     6d0:	2380      	movs	r3, #128	@ 0x80
     6d2:	02db      	lsls	r3, r3, #11
     6d4:	400b      	ands	r3, r1
                                      (config->enablePeriodSwap ? TCPWM_CNT_CTRL_AUTO_RELOAD_PERIOD_Msk : 0UL) |
     6d6:	431a      	orrs	r2, r3
                                      (((uint32_t)(config->pwmAlignment) << TCPWM_CNT_CTRL_UP_DOWN_MODE_Pos) & TCPWM_CNT_CTRL_UP_DOWN_MODE_Msk) |
     6d8:	687b      	ldr	r3, [r7, #4]
     6da:	689b      	ldr	r3, [r3, #8]
     6dc:	0419      	lsls	r1, r3, #16
     6de:	23c0      	movs	r3, #192	@ 0xc0
     6e0:	029b      	lsls	r3, r3, #10
     6e2:	400b      	ands	r3, r1
                                      (((uint32_t)(config->runMode) << TCPWM_CNT_CTRL_ONE_SHOT_Pos) & TCPWM_CNT_CTRL_ONE_SHOT_Msk) |
     6e4:	431a      	orrs	r2, r3
                                      (((uint32_t)(config->pwmMode) << TCPWM_CNT_CTRL_MODE_Pos) & TCPWM_CNT_CTRL_MODE_Msk) |
     6e6:	687b      	ldr	r3, [r7, #4]
     6e8:	681b      	ldr	r3, [r3, #0]
     6ea:	0619      	lsls	r1, r3, #24
     6ec:	23e0      	movs	r3, #224	@ 0xe0
     6ee:	04db      	lsls	r3, r3, #19
     6f0:	400b      	ands	r3, r1
                                      (((uint32_t)(config->pwmAlignment) << TCPWM_CNT_CTRL_UP_DOWN_MODE_Pos) & TCPWM_CNT_CTRL_UP_DOWN_MODE_Msk) |
     6f2:	431a      	orrs	r2, r3
                                      (((uint32_t)((config->invertPWMOut | (config->invertPWMOutN << 1U))) << TCPWM_CNT_CTRL_QUADRATURE_MODE_Pos) & TCPWM_CNT_CTRL_QUADRATURE_MODE_Msk) |
     6f4:	687b      	ldr	r3, [r7, #4]
     6f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
     6fc:	005b      	lsls	r3, r3, #1
     6fe:	430b      	orrs	r3, r1
     700:	0519      	lsls	r1, r3, #20
     702:	23c0      	movs	r3, #192	@ 0xc0
     704:	039b      	lsls	r3, r3, #14
     706:	400b      	ands	r3, r1
                                      (((uint32_t)(config->pwmMode) << TCPWM_CNT_CTRL_MODE_Pos) & TCPWM_CNT_CTRL_MODE_Msk) |
     708:	431a      	orrs	r2, r3
                                      (config->killMode << 2U) |
     70a:	687b      	ldr	r3, [r7, #4]
     70c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
     70e:	009b      	lsls	r3, r3, #2
                                      (((uint32_t)((config->invertPWMOut | (config->invertPWMOutN << 1U))) << TCPWM_CNT_CTRL_QUADRATURE_MODE_Pos) & TCPWM_CNT_CTRL_QUADRATURE_MODE_Msk) |
     710:	431a      	orrs	r2, r3
                                      (((uint32_t)(((5U == config->pwmMode) ? config->deadTimeClocks : config->clockPrescaler)) << TCPWM_CNT_CTRL_GENERIC_Pos) & TCPWM_CNT_CTRL_GENERIC_Msk));
     712:	687b      	ldr	r3, [r7, #4]
     714:	681b      	ldr	r3, [r3, #0]
     716:	2b05      	cmp	r3, #5
     718:	d105      	bne.n	726 <TCPWM_PWM_Init+0x88>
     71a:	687b      	ldr	r3, [r7, #4]
     71c:	68db      	ldr	r3, [r3, #12]
     71e:	021b      	lsls	r3, r3, #8
     720:	041b      	lsls	r3, r3, #16
     722:	0c1b      	lsrs	r3, r3, #16
     724:	e004      	b.n	730 <TCPWM_PWM_Init+0x92>
     726:	687b      	ldr	r3, [r7, #4]
     728:	685b      	ldr	r3, [r3, #4]
     72a:	021b      	lsls	r3, r3, #8
     72c:	041b      	lsls	r3, r3, #16
     72e:	0c1b      	lsrs	r3, r3, #16
                                      (config->killMode << 2U) |
     730:	4313      	orrs	r3, r2
     732:	0019      	movs	r1, r3
        TCPWM_CNT_CTRL(base, cntNum) = ((config->enableCompareSwap ? TCPWM_CNT_CTRL_AUTO_RELOAD_CC_Msk : 0UL) |
     734:	68fb      	ldr	r3, [r7, #12]
     736:	68ba      	ldr	r2, [r7, #8]
     738:	3204      	adds	r2, #4
     73a:	0192      	lsls	r2, r2, #6
     73c:	50d1      	str	r1, [r2, r3]

        if (0U == config->pwmAlignment) //Left Align
     73e:	687b      	ldr	r3, [r7, #4]
     740:	689b      	ldr	r3, [r3, #8]
     742:	2b00      	cmp	r3, #0
     744:	d112      	bne.n	76c <TCPWM_PWM_Init+0xce>
        {
            TCPWM_CNT_COUNTER(base, cntNum) = 0U; //Up init
     746:	68f9      	ldr	r1, [r7, #12]
     748:	68ba      	ldr	r2, [r7, #8]
     74a:	2384      	movs	r3, #132	@ 0x84
     74c:	005b      	lsls	r3, r3, #1
     74e:	0192      	lsls	r2, r2, #6
     750:	188a      	adds	r2, r1, r2
     752:	18d3      	adds	r3, r2, r3
     754:	2200      	movs	r2, #0
     756:	601a      	str	r2, [r3, #0]
            TCPWM_CNT_TR_CTRL2(base, cntNum) = CY_TCPWM_PWM_MODE_LEFT;
     758:	68f9      	ldr	r1, [r7, #12]
     75a:	68ba      	ldr	r2, [r7, #8]
     75c:	2394      	movs	r3, #148	@ 0x94
     75e:	005b      	lsls	r3, r3, #1
     760:	0192      	lsls	r2, r2, #6
     762:	188a      	adds	r2, r1, r2
     764:	18d3      	adds	r3, r2, r3
     766:	2231      	movs	r2, #49	@ 0x31
     768:	601a      	str	r2, [r3, #0]
     76a:	e029      	b.n	7c0 <TCPWM_PWM_Init+0x122>
        }
        else if (1U == config->pwmAlignment) //Right Align
     76c:	687b      	ldr	r3, [r7, #4]
     76e:	689b      	ldr	r3, [r3, #8]
     770:	2b01      	cmp	r3, #1
     772:	d113      	bne.n	79c <TCPWM_PWM_Init+0xfe>
        {
            TCPWM_CNT_COUNTER(base, cntNum) = config->period0;
     774:	687b      	ldr	r3, [r7, #4]
     776:	695a      	ldr	r2, [r3, #20]
     778:	68f8      	ldr	r0, [r7, #12]
     77a:	68b9      	ldr	r1, [r7, #8]
     77c:	2384      	movs	r3, #132	@ 0x84
     77e:	005b      	lsls	r3, r3, #1
     780:	0189      	lsls	r1, r1, #6
     782:	1841      	adds	r1, r0, r1
     784:	18cb      	adds	r3, r1, r3
     786:	601a      	str	r2, [r3, #0]
            TCPWM_CNT_TR_CTRL2(base, cntNum) = CY_TCPWM_PWM_MODE_RIGHT;
     788:	68f9      	ldr	r1, [r7, #12]
     78a:	68ba      	ldr	r2, [r7, #8]
     78c:	2394      	movs	r3, #148	@ 0x94
     78e:	005b      	lsls	r3, r3, #1
     790:	0192      	lsls	r2, r2, #6
     792:	188a      	adds	r2, r1, r2
     794:	18d3      	adds	r3, r2, r3
     796:	221c      	movs	r2, #28
     798:	601a      	str	r2, [r3, #0]
     79a:	e011      	b.n	7c0 <TCPWM_PWM_Init+0x122>
        }
        else
        {
            TCPWM_CNT_COUNTER(base, cntNum) = 1U; //Up DOwn
     79c:	68f9      	ldr	r1, [r7, #12]
     79e:	68ba      	ldr	r2, [r7, #8]
     7a0:	2384      	movs	r3, #132	@ 0x84
     7a2:	005b      	lsls	r3, r3, #1
     7a4:	0192      	lsls	r2, r2, #6
     7a6:	188a      	adds	r2, r1, r2
     7a8:	18d3      	adds	r3, r2, r3
     7aa:	2201      	movs	r2, #1
     7ac:	601a      	str	r2, [r3, #0]
            TCPWM_CNT_TR_CTRL2(base, cntNum) = CY_TCPWM_PWM_MODE_CNTR_OR_ASYMM;
     7ae:	68f9      	ldr	r1, [r7, #12]
     7b0:	68ba      	ldr	r2, [r7, #8]
     7b2:	2394      	movs	r3, #148	@ 0x94
     7b4:	005b      	lsls	r3, r3, #1
     7b6:	0192      	lsls	r2, r2, #6
     7b8:	188a      	adds	r2, r1, r2
     7ba:	18d3      	adds	r3, r2, r3
     7bc:	2212      	movs	r2, #18
     7be:	601a      	str	r2, [r3, #0]
        }

        TCPWM_CNT_CC(base, cntNum) = config->compare0;
     7c0:	687b      	ldr	r3, [r7, #4]
     7c2:	6a1a      	ldr	r2, [r3, #32]
     7c4:	68f8      	ldr	r0, [r7, #12]
     7c6:	68b9      	ldr	r1, [r7, #8]
     7c8:	2386      	movs	r3, #134	@ 0x86
     7ca:	005b      	lsls	r3, r3, #1
     7cc:	0189      	lsls	r1, r1, #6
     7ce:	1841      	adds	r1, r0, r1
     7d0:	18cb      	adds	r3, r1, r3
     7d2:	601a      	str	r2, [r3, #0]
        TCPWM_CNT_CC_BUFF(base, cntNum) = config->compare1;
     7d4:	687b      	ldr	r3, [r7, #4]
     7d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
     7d8:	68f8      	ldr	r0, [r7, #12]
     7da:	68b9      	ldr	r1, [r7, #8]
     7dc:	2388      	movs	r3, #136	@ 0x88
     7de:	005b      	lsls	r3, r3, #1
     7e0:	0189      	lsls	r1, r1, #6
     7e2:	1841      	adds	r1, r0, r1
     7e4:	18cb      	adds	r3, r1, r3
     7e6:	601a      	str	r2, [r3, #0]
        TCPWM_CNT_PERIOD(base, cntNum) = config->period0;
     7e8:	687b      	ldr	r3, [r7, #4]
     7ea:	695a      	ldr	r2, [r3, #20]
     7ec:	68f8      	ldr	r0, [r7, #12]
     7ee:	68b9      	ldr	r1, [r7, #8]
     7f0:	238a      	movs	r3, #138	@ 0x8a
     7f2:	005b      	lsls	r3, r3, #1
     7f4:	0189      	lsls	r1, r1, #6
     7f6:	1841      	adds	r1, r0, r1
     7f8:	18cb      	adds	r3, r1, r3
     7fa:	601a      	str	r2, [r3, #0]
        TCPWM_CNT_PERIOD_BUFF(base, cntNum) = config->period1;
     7fc:	687b      	ldr	r3, [r7, #4]
     7fe:	699a      	ldr	r2, [r3, #24]
     800:	68f8      	ldr	r0, [r7, #12]
     802:	68b9      	ldr	r1, [r7, #8]
     804:	238c      	movs	r3, #140	@ 0x8c
     806:	005b      	lsls	r3, r3, #1
     808:	0189      	lsls	r1, r1, #6
     80a:	1841      	adds	r1, r0, r1
     80c:	18cb      	adds	r3, r1, r3
     80e:	601a      	str	r2, [r3, #0]

        TCPWM_CNT_TR_CTRL0(base, cntNum) = ((((uint32_t)(config->swapInput) << TCPWM_CNT_TR_CTRL0_CAPTURE_SEL_Pos) & TCPWM_CNT_TR_CTRL0_CAPTURE_SEL_Msk) |
     810:	687b      	ldr	r3, [r7, #4]
     812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
     814:	220f      	movs	r2, #15
     816:	401a      	ands	r2, r3
                                        (((uint32_t)(config->reloadInput) << TCPWM_CNT_TR_CTRL0_RELOAD_SEL_Pos) & TCPWM_CNT_TR_CTRL0_RELOAD_SEL_Msk) |
     818:	687b      	ldr	r3, [r7, #4]
     81a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
     81c:	0219      	lsls	r1, r3, #8
     81e:	23f0      	movs	r3, #240	@ 0xf0
     820:	011b      	lsls	r3, r3, #4
     822:	400b      	ands	r3, r1
        TCPWM_CNT_TR_CTRL0(base, cntNum) = ((((uint32_t)(config->swapInput) << TCPWM_CNT_TR_CTRL0_CAPTURE_SEL_Pos) & TCPWM_CNT_TR_CTRL0_CAPTURE_SEL_Msk) |
     824:	431a      	orrs	r2, r3
                                        (((uint32_t)(config->startInput) << TCPWM_CNT_TR_CTRL0_START_SEL_Pos) & TCPWM_CNT_TR_CTRL0_START_SEL_Msk) |
     826:	687b      	ldr	r3, [r7, #4]
     828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
     82a:	0419      	lsls	r1, r3, #16
     82c:	23f0      	movs	r3, #240	@ 0xf0
     82e:	031b      	lsls	r3, r3, #12
     830:	400b      	ands	r3, r1
                                        (((uint32_t)(config->reloadInput) << TCPWM_CNT_TR_CTRL0_RELOAD_SEL_Pos) & TCPWM_CNT_TR_CTRL0_RELOAD_SEL_Msk) |
     832:	431a      	orrs	r2, r3
                                        (((uint32_t)(config->killInput) << TCPWM_CNT_TR_CTRL0_STOP_SEL_Pos) & TCPWM_CNT_TR_CTRL0_STOP_SEL_Msk) |
     834:	687b      	ldr	r3, [r7, #4]
     836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
     838:	031b      	lsls	r3, r3, #12
     83a:	041b      	lsls	r3, r3, #16
     83c:	0c1b      	lsrs	r3, r3, #16
                                        (((uint32_t)(config->startInput) << TCPWM_CNT_TR_CTRL0_START_SEL_Pos) & TCPWM_CNT_TR_CTRL0_START_SEL_Msk) |
     83e:	431a      	orrs	r2, r3
                                        (((uint32_t)(config->countInput) << TCPWM_CNT_TR_CTRL0_COUNT_SEL_Pos) & TCPWM_CNT_TR_CTRL0_COUNT_SEL_Msk));
     840:	687b      	ldr	r3, [r7, #4]
     842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
     844:	011b      	lsls	r3, r3, #4
     846:	21ff      	movs	r1, #255	@ 0xff
     848:	400b      	ands	r3, r1
                                        (((uint32_t)(config->killInput) << TCPWM_CNT_TR_CTRL0_STOP_SEL_Pos) & TCPWM_CNT_TR_CTRL0_STOP_SEL_Msk) |
     84a:	431a      	orrs	r2, r3
        TCPWM_CNT_TR_CTRL0(base, cntNum) = ((((uint32_t)(config->swapInput) << TCPWM_CNT_TR_CTRL0_CAPTURE_SEL_Pos) & TCPWM_CNT_TR_CTRL0_CAPTURE_SEL_Msk) |
     84c:	68f8      	ldr	r0, [r7, #12]
     84e:	68b9      	ldr	r1, [r7, #8]
     850:	2390      	movs	r3, #144	@ 0x90
     852:	005b      	lsls	r3, r3, #1
     854:	0189      	lsls	r1, r1, #6
     856:	1841      	adds	r1, r0, r1
     858:	18cb      	adds	r3, r1, r3
     85a:	601a      	str	r2, [r3, #0]

        TCPWM_CNT_TR_CTRL1(base, cntNum) = ((((uint32_t)(config->swapInputMode) << TCPWM_CNT_TR_CTRL1_CAPTURE_EDGE_Pos) & TCPWM_CNT_TR_CTRL1_CAPTURE_EDGE_Msk) |
     85c:	687b      	ldr	r3, [r7, #4]
     85e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
     860:	2203      	movs	r2, #3
     862:	401a      	ands	r2, r3
                                        (((uint32_t)(config->reloadInputMode) << TCPWM_CNT_TR_CTRL1_RELOAD_EDGE_Pos) & TCPWM_CNT_TR_CTRL1_RELOAD_EDGE_Msk) |
     864:	687b      	ldr	r3, [r7, #4]
     866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
     868:	011b      	lsls	r3, r3, #4
     86a:	2130      	movs	r1, #48	@ 0x30
     86c:	400b      	ands	r3, r1
        TCPWM_CNT_TR_CTRL1(base, cntNum) = ((((uint32_t)(config->swapInputMode) << TCPWM_CNT_TR_CTRL1_CAPTURE_EDGE_Pos) & TCPWM_CNT_TR_CTRL1_CAPTURE_EDGE_Msk) |
     86e:	431a      	orrs	r2, r3
                                        (((uint32_t)(config->startInputMode) << TCPWM_CNT_TR_CTRL1_START_EDGE_Pos) & TCPWM_CNT_TR_CTRL1_START_EDGE_Msk) |
     870:	687b      	ldr	r3, [r7, #4]
     872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
     874:	0219      	lsls	r1, r3, #8
     876:	23c0      	movs	r3, #192	@ 0xc0
     878:	009b      	lsls	r3, r3, #2
     87a:	400b      	ands	r3, r1
                                        (((uint32_t)(config->reloadInputMode) << TCPWM_CNT_TR_CTRL1_RELOAD_EDGE_Pos) & TCPWM_CNT_TR_CTRL1_RELOAD_EDGE_Msk) |
     87c:	431a      	orrs	r2, r3
                                        (((uint32_t)(config->killInputMode) << TCPWM_CNT_TR_CTRL1_STOP_EDGE_Pos) & TCPWM_CNT_TR_CTRL1_STOP_EDGE_Msk) |
     87e:	687b      	ldr	r3, [r7, #4]
     880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
     882:	019b      	lsls	r3, r3, #6
     884:	21ff      	movs	r1, #255	@ 0xff
     886:	400b      	ands	r3, r1
                                        (((uint32_t)(config->startInputMode) << TCPWM_CNT_TR_CTRL1_START_EDGE_Pos) & TCPWM_CNT_TR_CTRL1_START_EDGE_Msk) |
     888:	431a      	orrs	r2, r3
                                        (((uint32_t)(config->countInputMode) << TCPWM_CNT_TR_CTRL1_COUNT_EDGE_Pos) & TCPWM_CNT_TR_CTRL1_COUNT_EDGE_Msk));
     88a:	687b      	ldr	r3, [r7, #4]
     88c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
     88e:	009b      	lsls	r3, r3, #2
     890:	210c      	movs	r1, #12
     892:	400b      	ands	r3, r1
                                        (((uint32_t)(config->killInputMode) << TCPWM_CNT_TR_CTRL1_STOP_EDGE_Pos) & TCPWM_CNT_TR_CTRL1_STOP_EDGE_Msk) |
     894:	431a      	orrs	r2, r3
        TCPWM_CNT_TR_CTRL1(base, cntNum) = ((((uint32_t)(config->swapInputMode) << TCPWM_CNT_TR_CTRL1_CAPTURE_EDGE_Pos) & TCPWM_CNT_TR_CTRL1_CAPTURE_EDGE_Msk) |
     896:	68f8      	ldr	r0, [r7, #12]
     898:	68b9      	ldr	r1, [r7, #8]
     89a:	2392      	movs	r3, #146	@ 0x92
     89c:	005b      	lsls	r3, r3, #1
     89e:	0189      	lsls	r1, r1, #6
     8a0:	1841      	adds	r1, r0, r1
     8a2:	18cb      	adds	r3, r1, r3
     8a4:	601a      	str	r2, [r3, #0]

        TCPWM_CNT_INTR_MASK(base, cntNum) = config->interruptSources;
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
     8aa:	68f8      	ldr	r0, [r7, #12]
     8ac:	68b9      	ldr	r1, [r7, #8]
     8ae:	239c      	movs	r3, #156	@ 0x9c
     8b0:	005b      	lsls	r3, r3, #1
     8b2:	0189      	lsls	r1, r1, #6
     8b4:	1841      	adds	r1, r0, r1
     8b6:	18cb      	adds	r3, r1, r3
     8b8:	601a      	str	r2, [r3, #0]
}
     8ba:	46c0      	nop			@ (mov r8, r8)
     8bc:	46bd      	mov	sp, r7
     8be:	b004      	add	sp, #16
     8c0:	bd80      	pop	{r7, pc}

000008c2 <TCPWM_Counter_Enable>:


void TCPWM_Counter_Enable(TCPWM_Type *base, uint32_t cntNum)
{
     8c2:	b580      	push	{r7, lr}
     8c4:	b082      	sub	sp, #8
     8c6:	af00      	add	r7, sp, #0
     8c8:	6078      	str	r0, [r7, #4]
     8ca:	6039      	str	r1, [r7, #0]
    TCPWM_CTRL(base) |= (1UL << cntNum);
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	681a      	ldr	r2, [r3, #0]
     8d0:	2101      	movs	r1, #1
     8d2:	683b      	ldr	r3, [r7, #0]
     8d4:	4099      	lsls	r1, r3
     8d6:	000b      	movs	r3, r1
     8d8:	431a      	orrs	r2, r3
     8da:	687b      	ldr	r3, [r7, #4]
     8dc:	601a      	str	r2, [r3, #0]
}
     8de:	46c0      	nop			@ (mov r8, r8)
     8e0:	46bd      	mov	sp, r7
     8e2:	b002      	add	sp, #8
     8e4:	bd80      	pop	{r7, pc}

000008e6 <TCPWM_SetInterrupt>:

void TCPWM_SetInterrupt(TCPWM_Type *base, uint32_t cntNum,  uint32_t source)
{
     8e6:	b580      	push	{r7, lr}
     8e8:	b084      	sub	sp, #16
     8ea:	af00      	add	r7, sp, #0
     8ec:	60f8      	str	r0, [r7, #12]
     8ee:	60b9      	str	r1, [r7, #8]
     8f0:	607a      	str	r2, [r7, #4]
    TCPWM_CNT_INTR_SET(base, cntNum) = source;
     8f2:	68f9      	ldr	r1, [r7, #12]
     8f4:	68ba      	ldr	r2, [r7, #8]
     8f6:	239a      	movs	r3, #154	@ 0x9a
     8f8:	005b      	lsls	r3, r3, #1
     8fa:	0192      	lsls	r2, r2, #6
     8fc:	188a      	adds	r2, r1, r2
     8fe:	18d3      	adds	r3, r2, r3
     900:	687a      	ldr	r2, [r7, #4]
     902:	601a      	str	r2, [r3, #0]
}
     904:	46c0      	nop			@ (mov r8, r8)
     906:	46bd      	mov	sp, r7
     908:	b004      	add	sp, #16
     90a:	bd80      	pop	{r7, pc}

0000090c <TCPWM_Counter_SetPeriod>:

void TCPWM_Counter_SetPeriod(TCPWM_Type *base, uint32_t cntNum,  uint32_t period)
{
     90c:	b580      	push	{r7, lr}
     90e:	b084      	sub	sp, #16
     910:	af00      	add	r7, sp, #0
     912:	60f8      	str	r0, [r7, #12]
     914:	60b9      	str	r1, [r7, #8]
     916:	607a      	str	r2, [r7, #4]
    TCPWM_CNT_PERIOD(base, cntNum) = period;
     918:	68f9      	ldr	r1, [r7, #12]
     91a:	68ba      	ldr	r2, [r7, #8]
     91c:	238a      	movs	r3, #138	@ 0x8a
     91e:	005b      	lsls	r3, r3, #1
     920:	0192      	lsls	r2, r2, #6
     922:	188a      	adds	r2, r1, r2
     924:	18d3      	adds	r3, r2, r3
     926:	687a      	ldr	r2, [r7, #4]
     928:	601a      	str	r2, [r3, #0]
}
     92a:	46c0      	nop			@ (mov r8, r8)
     92c:	46bd      	mov	sp, r7
     92e:	b004      	add	sp, #16
     930:	bd80      	pop	{r7, pc}

00000932 <TCPWM_TriggerStart>:

void TCPWM_TriggerStart(TCPWM_Type *base, uint32_t counters)
{
     932:	b580      	push	{r7, lr}
     934:	b082      	sub	sp, #8
     936:	af00      	add	r7, sp, #0
     938:	6078      	str	r0, [r7, #4]
     93a:	6039      	str	r1, [r7, #0]
    TCPWM_CMD(base) = (uint32_t)(counters << TCPWM_CMD_COUNTER_START_Pos);
     93c:	683b      	ldr	r3, [r7, #0]
     93e:	061a      	lsls	r2, r3, #24
     940:	687b      	ldr	r3, [r7, #4]
     942:	609a      	str	r2, [r3, #8]
}
     944:	46c0      	nop			@ (mov r8, r8)
     946:	46bd      	mov	sp, r7
     948:	b002      	add	sp, #8
     94a:	bd80      	pop	{r7, pc}

0000094c <TCPWM_TriggerReloadOrIndex>:

void TCPWM_TriggerReloadOrIndex(TCPWM_Type *base, uint32_t counters)
{
     94c:	b580      	push	{r7, lr}
     94e:	b082      	sub	sp, #8
     950:	af00      	add	r7, sp, #0
     952:	6078      	str	r0, [r7, #4]
     954:	6039      	str	r1, [r7, #0]
    TCPWM_CMD(base) = (uint32_t)(counters << TCPWM_CMD_COUNTER_RELOAD_Pos);
     956:	683b      	ldr	r3, [r7, #0]
     958:	021a      	lsls	r2, r3, #8
     95a:	687b      	ldr	r3, [r7, #4]
     95c:	609a      	str	r2, [r3, #8]
}
     95e:	46c0      	nop			@ (mov r8, r8)
     960:	46bd      	mov	sp, r7
     962:	b002      	add	sp, #8
     964:	bd80      	pop	{r7, pc}

00000966 <TCPWM_ClearInterrupt>:

void TCPWM_ClearInterrupt(TCPWM_Type *base, uint32_t cntNum,  uint32_t source)
{
     966:	b580      	push	{r7, lr}
     968:	b084      	sub	sp, #16
     96a:	af00      	add	r7, sp, #0
     96c:	60f8      	str	r0, [r7, #12]
     96e:	60b9      	str	r1, [r7, #8]
     970:	607a      	str	r2, [r7, #4]
    TCPWM_CNT_INTR(base, cntNum) = source;
     972:	68f9      	ldr	r1, [r7, #12]
     974:	68ba      	ldr	r2, [r7, #8]
     976:	2398      	movs	r3, #152	@ 0x98
     978:	005b      	lsls	r3, r3, #1
     97a:	0192      	lsls	r2, r2, #6
     97c:	188a      	adds	r2, r1, r2
     97e:	18d3      	adds	r3, r2, r3
     980:	687a      	ldr	r2, [r7, #4]
     982:	601a      	str	r2, [r3, #0]
    (void)TCPWM_CNT_INTR(base, cntNum);
     984:	68f9      	ldr	r1, [r7, #12]
     986:	68ba      	ldr	r2, [r7, #8]
     988:	2398      	movs	r3, #152	@ 0x98
     98a:	005b      	lsls	r3, r3, #1
     98c:	0192      	lsls	r2, r2, #6
     98e:	188a      	adds	r2, r1, r2
     990:	18d3      	adds	r3, r2, r3
     992:	681b      	ldr	r3, [r3, #0]
}
     994:	46c0      	nop			@ (mov r8, r8)
     996:	46bd      	mov	sp, r7
     998:	b004      	add	sp, #16
     99a:	bd80      	pop	{r7, pc}

0000099c <TCPWM_PWM_SetCompare0>:

void TCPWM_PWM_SetCompare0(TCPWM_Type *base, uint32_t cntNum,  uint32_t compare0)
{
     99c:	b580      	push	{r7, lr}
     99e:	b084      	sub	sp, #16
     9a0:	af00      	add	r7, sp, #0
     9a2:	60f8      	str	r0, [r7, #12]
     9a4:	60b9      	str	r1, [r7, #8]
     9a6:	607a      	str	r2, [r7, #4]
    TCPWM_CNT_CC(base, cntNum) = compare0;
     9a8:	68f9      	ldr	r1, [r7, #12]
     9aa:	68ba      	ldr	r2, [r7, #8]
     9ac:	2386      	movs	r3, #134	@ 0x86
     9ae:	005b      	lsls	r3, r3, #1
     9b0:	0192      	lsls	r2, r2, #6
     9b2:	188a      	adds	r2, r1, r2
     9b4:	18d3      	adds	r3, r2, r3
     9b6:	687a      	ldr	r2, [r7, #4]
     9b8:	601a      	str	r2, [r3, #0]
}
     9ba:	46c0      	nop			@ (mov r8, r8)
     9bc:	46bd      	mov	sp, r7
     9be:	b004      	add	sp, #16
     9c0:	bd80      	pop	{r7, pc}

000009c2 <TCPWM_PWM_SetCompare1>:

void TCPWM_PWM_SetCompare1(TCPWM_Type *base, uint32_t cntNum,  uint32_t compare1)
{
     9c2:	b580      	push	{r7, lr}
     9c4:	b084      	sub	sp, #16
     9c6:	af00      	add	r7, sp, #0
     9c8:	60f8      	str	r0, [r7, #12]
     9ca:	60b9      	str	r1, [r7, #8]
     9cc:	607a      	str	r2, [r7, #4]
    TCPWM_CNT_CC_BUFF(base, cntNum) = compare1;
     9ce:	68f9      	ldr	r1, [r7, #12]
     9d0:	68ba      	ldr	r2, [r7, #8]
     9d2:	2388      	movs	r3, #136	@ 0x88
     9d4:	005b      	lsls	r3, r3, #1
     9d6:	0192      	lsls	r2, r2, #6
     9d8:	188a      	adds	r2, r1, r2
     9da:	18d3      	adds	r3, r2, r3
     9dc:	687a      	ldr	r2, [r7, #4]
     9de:	601a      	str	r2, [r3, #0]
}
     9e0:	46c0      	nop			@ (mov r8, r8)
     9e2:	46bd      	mov	sp, r7
     9e4:	b004      	add	sp, #16
     9e6:	bd80      	pop	{r7, pc}

000009e8 <TCPWM_Counter_SetCounter>:

//Counter
void TCPWM_Counter_SetCounter(TCPWM_Type *base, uint32_t cntNum, uint32_t count)
{
     9e8:	b580      	push	{r7, lr}
     9ea:	b084      	sub	sp, #16
     9ec:	af00      	add	r7, sp, #0
     9ee:	60f8      	str	r0, [r7, #12]
     9f0:	60b9      	str	r1, [r7, #8]
     9f2:	607a      	str	r2, [r7, #4]
    TCPWM_CNT_COUNTER(base, cntNum) = count;
     9f4:	68f9      	ldr	r1, [r7, #12]
     9f6:	68ba      	ldr	r2, [r7, #8]
     9f8:	2384      	movs	r3, #132	@ 0x84
     9fa:	005b      	lsls	r3, r3, #1
     9fc:	0192      	lsls	r2, r2, #6
     9fe:	188a      	adds	r2, r1, r2
     a00:	18d3      	adds	r3, r2, r3
     a02:	687a      	ldr	r2, [r7, #4]
     a04:	601a      	str	r2, [r3, #0]
}
     a06:	46c0      	nop			@ (mov r8, r8)
     a08:	46bd      	mov	sp, r7
     a0a:	b004      	add	sp, #16
     a0c:	bd80      	pop	{r7, pc}

00000a0e <TCPWM_TriggerStopOrKill>:

void TCPWM_TriggerStopOrKill(TCPWM_Type *base, uint32_t counters)
{
     a0e:	b580      	push	{r7, lr}
     a10:	b082      	sub	sp, #8
     a12:	af00      	add	r7, sp, #0
     a14:	6078      	str	r0, [r7, #4]
     a16:	6039      	str	r1, [r7, #0]
    TCPWM_CMD(base) = (uint32_t)(counters << TCPWM_CMD_COUNTER_STOP_Pos);
     a18:	683b      	ldr	r3, [r7, #0]
     a1a:	041a      	lsls	r2, r3, #16
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	609a      	str	r2, [r3, #8]
}
     a20:	46c0      	nop			@ (mov r8, r8)
     a22:	46bd      	mov	sp, r7
     a24:	b002      	add	sp, #8
     a26:	bd80      	pop	{r7, pc}

00000a28 <TCPWM_Counter_GetCounter>:

uint32_t TCPWM_Counter_GetCounter(TCPWM_Type const  *base, uint32_t cntNum)
{
     a28:	b580      	push	{r7, lr}
     a2a:	b082      	sub	sp, #8
     a2c:	af00      	add	r7, sp, #0
     a2e:	6078      	str	r0, [r7, #4]
     a30:	6039      	str	r1, [r7, #0]
    return(TCPWM_CNT_COUNTER(base, cntNum));
     a32:	6879      	ldr	r1, [r7, #4]
     a34:	683a      	ldr	r2, [r7, #0]
     a36:	2384      	movs	r3, #132	@ 0x84
     a38:	005b      	lsls	r3, r3, #1
     a3a:	0192      	lsls	r2, r2, #6
     a3c:	188a      	adds	r2, r1, r2
     a3e:	18d3      	adds	r3, r2, r3
     a40:	681b      	ldr	r3, [r3, #0]
     a42:	0018      	movs	r0, r3
     a44:	46bd      	mov	sp, r7
     a46:	b002      	add	sp, #8
     a48:	bd80      	pop	{r7, pc}
	...

00000a4c <SysClk_PeriphDisableDivider>:
#include <stdint.h>
#include "Sys_Clock.h"

void SysClk_PeriphDisableDivider(cy_en_sysclk_divider_types_t dividerType, uint32_t dividerNum)
{
     a4c:	b580      	push	{r7, lr}
     a4e:	b082      	sub	sp, #8
     a50:	af00      	add	r7, sp, #0
     a52:	0002      	movs	r2, r0
     a54:	6039      	str	r1, [r7, #0]
     a56:	1dfb      	adds	r3, r7, #7
     a58:	701a      	strb	r2, [r3, #0]
        /* specify the divider and disable it */
        PERI_DIV_CMD = PERI_DIV_CMD_DISABLE_Msk            |
              (((uint32_t)(dividerType) << PERI_DIV_CMD_SEL_TYPE_Pos) & PERI_DIV_CMD_SEL_TYPE_Msk) |
     a5a:	1dfb      	adds	r3, r7, #7
     a5c:	781b      	ldrb	r3, [r3, #0]
     a5e:	019b      	lsls	r3, r3, #6
     a60:	22ff      	movs	r2, #255	@ 0xff
     a62:	401a      	ands	r2, r3
              (((uint32_t)(dividerNum) << PERI_DIV_CMD_SEL_DIV_Pos) & PERI_DIV_CMD_SEL_DIV_Msk);
     a64:	683b      	ldr	r3, [r7, #0]
     a66:	213f      	movs	r1, #63	@ 0x3f
     a68:	400b      	ands	r3, r1
              (((uint32_t)(dividerType) << PERI_DIV_CMD_SEL_TYPE_Pos) & PERI_DIV_CMD_SEL_TYPE_Msk) |
     a6a:	431a      	orrs	r2, r3
        PERI_DIV_CMD = PERI_DIV_CMD_DISABLE_Msk            |
     a6c:	4b04      	ldr	r3, [pc, #16]	@ (a80 <SysClk_PeriphDisableDivider+0x34>)
              (((uint32_t)(dividerType) << PERI_DIV_CMD_SEL_TYPE_Pos) & PERI_DIV_CMD_SEL_TYPE_Msk) |
     a6e:	2180      	movs	r1, #128	@ 0x80
     a70:	05c9      	lsls	r1, r1, #23
     a72:	430a      	orrs	r2, r1
        PERI_DIV_CMD = PERI_DIV_CMD_DISABLE_Msk            |
     a74:	601a      	str	r2, [r3, #0]
}
     a76:	46c0      	nop			@ (mov r8, r8)
     a78:	46bd      	mov	sp, r7
     a7a:	b002      	add	sp, #8
     a7c:	bd80      	pop	{r7, pc}
     a7e:	46c0      	nop			@ (mov r8, r8)
     a80:	40010000 	.word	0x40010000

00000a84 <SysClk_PeriphSetDivider>:

void SysClk_PeriphSetDivider(cy_en_sysclk_divider_types_t dividerType, uint32_t dividerNum, uint32_t dividerValue)
{
     a84:	b580      	push	{r7, lr}
     a86:	b084      	sub	sp, #16
     a88:	af00      	add	r7, sp, #0
     a8a:	60b9      	str	r1, [r7, #8]
     a8c:	607a      	str	r2, [r7, #4]
     a8e:	210f      	movs	r1, #15
     a90:	187b      	adds	r3, r7, r1
     a92:	1c02      	adds	r2, r0, #0
     a94:	701a      	strb	r2, [r3, #0]
        dividerType = dividerType;
     a96:	187b      	adds	r3, r7, r1
     a98:	187a      	adds	r2, r7, r1
     a9a:	7812      	ldrb	r2, [r2, #0]
     a9c:	701a      	strb	r2, [r3, #0]
        PERI_DIV_16_CTL[dividerNum] =  ((((PERI_DIV_16_CTL[dividerNum])) & 
     a9e:	4a0a      	ldr	r2, [pc, #40]	@ (ac8 <SysClk_PeriphSetDivider+0x44>)
     aa0:	68bb      	ldr	r3, [r7, #8]
     aa2:	33c0      	adds	r3, #192	@ 0xc0
     aa4:	009b      	lsls	r3, r3, #2
     aa6:	589b      	ldr	r3, [r3, r2]
     aa8:	4a08      	ldr	r2, [pc, #32]	@ (acc <SysClk_PeriphSetDivider+0x48>)
     aaa:	401a      	ands	r2, r3
                                        ((uint32_t)(~(PERI_DIV_16_CTL_INT16_DIV_Msk)))) | 
                                        ((((uint32_t)(dividerValue) << PERI_DIV_16_CTL_INT16_DIV_Pos) & 
     aac:	687b      	ldr	r3, [r7, #4]
     aae:	021b      	lsls	r3, r3, #8
     ab0:	4907      	ldr	r1, [pc, #28]	@ (ad0 <SysClk_PeriphSetDivider+0x4c>)
     ab2:	400b      	ands	r3, r1
        PERI_DIV_16_CTL[dividerNum] =  ((((PERI_DIV_16_CTL[dividerNum])) & 
     ab4:	4904      	ldr	r1, [pc, #16]	@ (ac8 <SysClk_PeriphSetDivider+0x44>)
                                        ((uint32_t)(~(PERI_DIV_16_CTL_INT16_DIV_Msk)))) | 
     ab6:	431a      	orrs	r2, r3
        PERI_DIV_16_CTL[dividerNum] =  ((((PERI_DIV_16_CTL[dividerNum])) & 
     ab8:	68bb      	ldr	r3, [r7, #8]
     aba:	33c0      	adds	r3, #192	@ 0xc0
     abc:	009b      	lsls	r3, r3, #2
     abe:	505a      	str	r2, [r3, r1]
                                        PERI_DIV_16_CTL_INT16_DIV_Msk)));

}
     ac0:	46c0      	nop			@ (mov r8, r8)
     ac2:	46bd      	mov	sp, r7
     ac4:	b004      	add	sp, #16
     ac6:	bd80      	pop	{r7, pc}
     ac8:	40010000 	.word	0x40010000
     acc:	ff0000ff 	.word	0xff0000ff
     ad0:	00ffff00 	.word	0x00ffff00

00000ad4 <SysClk_PeriphEnableDivider>:

void SysClk_PeriphEnableDivider(cy_en_sysclk_divider_types_t dividerType, uint32_t dividerNum)
{
     ad4:	b580      	push	{r7, lr}
     ad6:	b082      	sub	sp, #8
     ad8:	af00      	add	r7, sp, #0
     ada:	0002      	movs	r2, r0
     adc:	6039      	str	r1, [r7, #0]
     ade:	1dfb      	adds	r3, r7, #7
     ae0:	701a      	strb	r2, [r3, #0]
        /* specify the divider, make the reference = clk_peri, and enable the divider */
        PERI_DIV_CMD = PERI_DIV_CMD_ENABLE_Msk             |
                       PERI_DIV_CMD_PA_SEL_TYPE_Msk        |
                       PERI_DIV_CMD_PA_SEL_DIV_Msk         |
              (((uint32_t)(dividerType) << PERI_DIV_CMD_SEL_TYPE_Pos) & PERI_DIV_CMD_SEL_TYPE_Msk) |
     ae2:	1dfb      	adds	r3, r7, #7
     ae4:	781b      	ldrb	r3, [r3, #0]
     ae6:	019b      	lsls	r3, r3, #6
     ae8:	22ff      	movs	r2, #255	@ 0xff
     aea:	401a      	ands	r2, r3
              (((uint32_t)(dividerNum) << PERI_DIV_CMD_SEL_DIV_Pos) & PERI_DIV_CMD_SEL_DIV_Msk);
     aec:	683b      	ldr	r3, [r7, #0]
     aee:	213f      	movs	r1, #63	@ 0x3f
     af0:	400b      	ands	r3, r1
              (((uint32_t)(dividerType) << PERI_DIV_CMD_SEL_TYPE_Pos) & PERI_DIV_CMD_SEL_TYPE_Msk) |
     af2:	431a      	orrs	r2, r3
        PERI_DIV_CMD = PERI_DIV_CMD_ENABLE_Msk             |
     af4:	4b04      	ldr	r3, [pc, #16]	@ (b08 <SysClk_PeriphEnableDivider+0x34>)
              (((uint32_t)(dividerType) << PERI_DIV_CMD_SEL_TYPE_Pos) & PERI_DIV_CMD_SEL_TYPE_Msk) |
     af6:	4905      	ldr	r1, [pc, #20]	@ (b0c <SysClk_PeriphEnableDivider+0x38>)
     af8:	430a      	orrs	r2, r1
        PERI_DIV_CMD = PERI_DIV_CMD_ENABLE_Msk             |
     afa:	601a      	str	r2, [r3, #0]
        
        (void)PERI_DIV_CMD; /* dummy read to handle buffered writes */
     afc:	4b02      	ldr	r3, [pc, #8]	@ (b08 <SysClk_PeriphEnableDivider+0x34>)
     afe:	681b      	ldr	r3, [r3, #0]
}
     b00:	46c0      	nop			@ (mov r8, r8)
     b02:	46bd      	mov	sp, r7
     b04:	b002      	add	sp, #8
     b06:	bd80      	pop	{r7, pc}
     b08:	40010000 	.word	0x40010000
     b0c:	8000ff00 	.word	0x8000ff00

00000b10 <SysClk_PeriphAssignDivider>:

void SysClk_PeriphAssignDivider(en_clk_dst_t periphNum, cy_en_sysclk_divider_types_t dividerType, uint32_t dividerNum)
{
     b10:	b580      	push	{r7, lr}
     b12:	b082      	sub	sp, #8
     b14:	af00      	add	r7, sp, #0
     b16:	603a      	str	r2, [r7, #0]
     b18:	1dfb      	adds	r3, r7, #7
     b1a:	1c02      	adds	r2, r0, #0
     b1c:	701a      	strb	r2, [r3, #0]
     b1e:	1dbb      	adds	r3, r7, #6
     b20:	1c0a      	adds	r2, r1, #0
     b22:	701a      	strb	r2, [r3, #0]

        PERI_PCLK_CTL[periphNum] = (((uint32_t)(dividerType) << PERI_PCLK_CTL_SEL_TYPE_Pos) & PERI_PCLK_CTL_SEL_TYPE_Msk) | (((uint32_t)(dividerNum) << PERI_PCLK_CTL_SEL_DIV_Pos) & PERI_PCLK_CTL_SEL_DIV_Msk);
     b24:	1dbb      	adds	r3, r7, #6
     b26:	781b      	ldrb	r3, [r3, #0]
     b28:	019b      	lsls	r3, r3, #6
     b2a:	22ff      	movs	r2, #255	@ 0xff
     b2c:	4013      	ands	r3, r2
     b2e:	0019      	movs	r1, r3
     b30:	683b      	ldr	r3, [r7, #0]
     b32:	223f      	movs	r2, #63	@ 0x3f
     b34:	401a      	ands	r2, r3
     b36:	4805      	ldr	r0, [pc, #20]	@ (b4c <SysClk_PeriphAssignDivider+0x3c>)
     b38:	1dfb      	adds	r3, r7, #7
     b3a:	781b      	ldrb	r3, [r3, #0]
     b3c:	430a      	orrs	r2, r1
     b3e:	3340      	adds	r3, #64	@ 0x40
     b40:	009b      	lsls	r3, r3, #2
     b42:	501a      	str	r2, [r3, r0]
}
     b44:	46c0      	nop			@ (mov r8, r8)
     b46:	46bd      	mov	sp, r7
     b48:	b002      	add	sp, #8
     b4a:	bd80      	pop	{r7, pc}
     b4c:	40010000 	.word	0x40010000

00000b50 <Cy_SysClk_ClkHfSetDivider>:

void Cy_SysClk_ClkHfSetDivider(uint8_t divider)
{
     b50:	b580      	push	{r7, lr}
     b52:	b082      	sub	sp, #8
     b54:	af00      	add	r7, sp, #0
     b56:	0002      	movs	r2, r0
     b58:	1dfb      	adds	r3, r7, #7
     b5a:	701a      	strb	r2, [r3, #0]
        CY_REG32_CLR_SET(SRSSLT_CLK_SELECT, SRSSLT_CLK_SELECT_HFCLK_DIV, divider);
     b5c:	4b08      	ldr	r3, [pc, #32]	@ (b80 <Cy_SysClk_ClkHfSetDivider+0x30>)
     b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
     b60:	220c      	movs	r2, #12
     b62:	4393      	bics	r3, r2
     b64:	0019      	movs	r1, r3
     b66:	1dfb      	adds	r3, r7, #7
     b68:	781b      	ldrb	r3, [r3, #0]
     b6a:	009b      	lsls	r3, r3, #2
     b6c:	220c      	movs	r2, #12
     b6e:	401a      	ands	r2, r3
     b70:	4b03      	ldr	r3, [pc, #12]	@ (b80 <Cy_SysClk_ClkHfSetDivider+0x30>)
     b72:	430a      	orrs	r2, r1
     b74:	629a      	str	r2, [r3, #40]	@ 0x28
}
     b76:	46c0      	nop			@ (mov r8, r8)
     b78:	46bd      	mov	sp, r7
     b7a:	b002      	add	sp, #8
     b7c:	bd80      	pop	{r7, pc}
     b7e:	46c0      	nop			@ (mov r8, r8)
     b80:	40030000 	.word	0x40030000

00000b84 <Cy_SysClk_ImoEnable>:

void Cy_SysClk_ImoEnable(void)
{
     b84:	b580      	push	{r7, lr}
     b86:	af00      	add	r7, sp, #0
   SRSSLT_CLK_IMO_CONFIG = SRSSLT_CLK_IMO_CONFIG_ENABLE_Msk;
     b88:	4b03      	ldr	r3, [pc, #12]	@ (b98 <Cy_SysClk_ImoEnable+0x14>)
     b8a:	2280      	movs	r2, #128	@ 0x80
     b8c:	0612      	lsls	r2, r2, #24
     b8e:	631a      	str	r2, [r3, #48]	@ 0x30
}
     b90:	46c0      	nop			@ (mov r8, r8)
     b92:	46bd      	mov	sp, r7
     b94:	bd80      	pop	{r7, pc}
     b96:	46c0      	nop			@ (mov r8, r8)
     b98:	40030000 	.word	0x40030000

00000b9c <Cy_SysClk_ImoGetFrequency>:

uint32_t Cy_SysClk_ImoGetFrequency(void)
{
     b9c:	b580      	push	{r7, lr}
     b9e:	af00      	add	r7, sp, #0
    return ((((((uint32_t)(SRSSLT_CLK_IMO_SELECT) & SRSSLT_CLK_IMO_SELECT_FREQ_Msk) >> SRSSLT_CLK_IMO_SELECT_FREQ_Pos) << 2UL) * 1000000UL) + (uint32_t)24000000UL);
     ba0:	4a0a      	ldr	r2, [pc, #40]	@ (bcc <Cy_SysClk_ImoGetFrequency+0x30>)
     ba2:	4b0b      	ldr	r3, [pc, #44]	@ (bd0 <Cy_SysClk_ImoGetFrequency+0x34>)
     ba4:	58d3      	ldr	r3, [r2, r3]
     ba6:	009b      	lsls	r3, r3, #2
     ba8:	221c      	movs	r2, #28
     baa:	4013      	ands	r3, r2
     bac:	0019      	movs	r1, r3
     bae:	000a      	movs	r2, r1
     bb0:	0152      	lsls	r2, r2, #5
     bb2:	1a52      	subs	r2, r2, r1
     bb4:	0193      	lsls	r3, r2, #6
     bb6:	1a9b      	subs	r3, r3, r2
     bb8:	00db      	lsls	r3, r3, #3
     bba:	185b      	adds	r3, r3, r1
     bbc:	019b      	lsls	r3, r3, #6
     bbe:	4a05      	ldr	r2, [pc, #20]	@ (bd4 <Cy_SysClk_ImoGetFrequency+0x38>)
     bc0:	4694      	mov	ip, r2
     bc2:	4463      	add	r3, ip
}
     bc4:	0018      	movs	r0, r3
     bc6:	46bd      	mov	sp, r7
     bc8:	bd80      	pop	{r7, pc}
     bca:	46c0      	nop			@ (mov r8, r8)
     bcc:	40030000 	.word	0x40030000
     bd0:	00000f08 	.word	0x00000f08
     bd4:	016e3600 	.word	0x016e3600

00000bd8 <Cy_SysClk_ImoSetFrequency>:

void Cy_SysClk_ImoSetFrequency(cy_en_sysclk_imo_freq_t freq)
{
     bd8:	b580      	push	{r7, lr}
     bda:	b086      	sub	sp, #24
     bdc:	af00      	add	r7, sp, #0
     bde:	6078      	str	r0, [r7, #4]

        if ((uint32_t) freq != Cy_SysClk_ImoGetFrequency())
     be0:	f7ff ffdc 	bl	b9c <Cy_SysClk_ImoGetFrequency>
     be4:	0002      	movs	r2, r0
     be6:	687b      	ldr	r3, [r7, #4]
     be8:	4293      	cmp	r3, r2
     bea:	d05f      	beq.n	cac <Cy_SysClk_ImoSetFrequency+0xd4>
        {
        /* Convert the frequency value in Hz into the SFLASH.IMO_TRIM register index */
        uint32_t locFreq = ((uint32_t)freq - (uint32_t)24000000UL) / 1000000UL;
     bec:	687b      	ldr	r3, [r7, #4]
     bee:	4a31      	ldr	r2, [pc, #196]	@ (cb4 <Cy_SysClk_ImoSetFrequency+0xdc>)
     bf0:	4694      	mov	ip, r2
     bf2:	4463      	add	r3, ip
     bf4:	4930      	ldr	r1, [pc, #192]	@ (cb8 <Cy_SysClk_ImoSetFrequency+0xe0>)
     bf6:	0018      	movs	r0, r3
     bf8:	f000 f944 	bl	e84 <__udivsi3>
     bfc:	0003      	movs	r3, r0
     bfe:	60fb      	str	r3, [r7, #12]

        /* Set IMO to 24 MHz */
        SRSSLT_CLK_IMO_SELECT = 0UL;
     c00:	4a2e      	ldr	r2, [pc, #184]	@ (cbc <Cy_SysClk_ImoSetFrequency+0xe4>)
     c02:	4b2f      	ldr	r3, [pc, #188]	@ (cc0 <Cy_SysClk_ImoSetFrequency+0xe8>)
     c04:	2100      	movs	r1, #0
     c06:	50d1      	str	r1, [r2, r3]

        /* Apply coarse trim */
        SRSSLT_CLK_IMO_TRIM1 = SFLASH_IMO_TRIM_LT(locFreq);
     c08:	492e      	ldr	r1, [pc, #184]	@ (cc4 <Cy_SysClk_ImoSetFrequency+0xec>)
     c0a:	23e6      	movs	r3, #230	@ 0xe6
     c0c:	33ff      	adds	r3, #255	@ 0xff
     c0e:	68fa      	ldr	r2, [r7, #12]
     c10:	188a      	adds	r2, r1, r2
     c12:	18d3      	adds	r3, r2, r3
     c14:	781b      	ldrb	r3, [r3, #0]
     c16:	b2db      	uxtb	r3, r3
     c18:	4a28      	ldr	r2, [pc, #160]	@ (cbc <Cy_SysClk_ImoSetFrequency+0xe4>)
     c1a:	0019      	movs	r1, r3
     c1c:	4b2a      	ldr	r3, [pc, #168]	@ (cc8 <Cy_SysClk_ImoSetFrequency+0xf0>)
     c1e:	50d1      	str	r1, [r2, r3]

        /* Zero out fine trim */
        SRSSLT_CLK_IMO_TRIM2 = 0UL;
     c20:	4a26      	ldr	r2, [pc, #152]	@ (cbc <Cy_SysClk_ImoSetFrequency+0xe4>)
     c22:	23f1      	movs	r3, #241	@ 0xf1
     c24:	011b      	lsls	r3, r3, #4
     c26:	2100      	movs	r1, #0
     c28:	50d1      	str	r1, [r2, r3]

        /* Apply TC trim */
        SRSSLT_CLK_IMO_TRIM3 = SFLASH_IMO_TCTRIM_LT(locFreq);
     c2a:	4926      	ldr	r1, [pc, #152]	@ (cc4 <Cy_SysClk_ImoSetFrequency+0xec>)
     c2c:	23e6      	movs	r3, #230	@ 0xe6
     c2e:	005b      	lsls	r3, r3, #1
     c30:	68fa      	ldr	r2, [r7, #12]
     c32:	188a      	adds	r2, r1, r2
     c34:	18d3      	adds	r3, r2, r3
     c36:	781b      	ldrb	r3, [r3, #0]
     c38:	b2db      	uxtb	r3, r3
     c3a:	4a20      	ldr	r2, [pc, #128]	@ (cbc <Cy_SysClk_ImoSetFrequency+0xe4>)
     c3c:	0019      	movs	r1, r3
     c3e:	4b23      	ldr	r3, [pc, #140]	@ (ccc <Cy_SysClk_ImoSetFrequency+0xf4>)
     c40:	50d1      	str	r1, [r2, r3]

        /* Convert the SFLASH.IMO_TRIM register index into the frequency bitfield value */
        locFreq >>= 2UL;
     c42:	68fb      	ldr	r3, [r7, #12]
     c44:	089b      	lsrs	r3, r3, #2
     c46:	60fb      	str	r3, [r7, #12]

        for(int i=0; i<50000; i++); //short delay
     c48:	2300      	movs	r3, #0
     c4a:	617b      	str	r3, [r7, #20]
     c4c:	e002      	b.n	c54 <Cy_SysClk_ImoSetFrequency+0x7c>
     c4e:	697b      	ldr	r3, [r7, #20]
     c50:	3301      	adds	r3, #1
     c52:	617b      	str	r3, [r7, #20]
     c54:	697b      	ldr	r3, [r7, #20]
     c56:	4a1e      	ldr	r2, [pc, #120]	@ (cd0 <Cy_SysClk_ImoSetFrequency+0xf8>)
     c58:	4293      	cmp	r3, r2
     c5a:	ddf8      	ble.n	c4e <Cy_SysClk_ImoSetFrequency+0x76>

        if (0UL != locFreq)
     c5c:	68fb      	ldr	r3, [r7, #12]
     c5e:	2b00      	cmp	r3, #0
     c60:	d024      	beq.n	cac <Cy_SysClk_ImoSetFrequency+0xd4>
        {
                /* Select nearby intermediate frequency */
                CY_REG32_CLR_SET(SRSSLT_CLK_IMO_SELECT, SRSSLT_CLK_IMO_SELECT_FREQ, locFreq - 1UL);
     c62:	4a16      	ldr	r2, [pc, #88]	@ (cbc <Cy_SysClk_ImoSetFrequency+0xe4>)
     c64:	4b16      	ldr	r3, [pc, #88]	@ (cc0 <Cy_SysClk_ImoSetFrequency+0xe8>)
     c66:	58d3      	ldr	r3, [r2, r3]
     c68:	2207      	movs	r2, #7
     c6a:	4393      	bics	r3, r2
     c6c:	001a      	movs	r2, r3
     c6e:	68fb      	ldr	r3, [r7, #12]
     c70:	3b01      	subs	r3, #1
     c72:	2107      	movs	r1, #7
     c74:	400b      	ands	r3, r1
     c76:	4911      	ldr	r1, [pc, #68]	@ (cbc <Cy_SysClk_ImoSetFrequency+0xe4>)
     c78:	4313      	orrs	r3, r2
     c7a:	4a11      	ldr	r2, [pc, #68]	@ (cc0 <Cy_SysClk_ImoSetFrequency+0xe8>)
     c7c:	508b      	str	r3, [r1, r2]
                for(int i=0; i<50000; i++); //short delay
     c7e:	2300      	movs	r3, #0
     c80:	613b      	str	r3, [r7, #16]
     c82:	e002      	b.n	c8a <Cy_SysClk_ImoSetFrequency+0xb2>
     c84:	693b      	ldr	r3, [r7, #16]
     c86:	3301      	adds	r3, #1
     c88:	613b      	str	r3, [r7, #16]
     c8a:	693b      	ldr	r3, [r7, #16]
     c8c:	4a10      	ldr	r2, [pc, #64]	@ (cd0 <Cy_SysClk_ImoSetFrequency+0xf8>)
     c8e:	4293      	cmp	r3, r2
     c90:	ddf8      	ble.n	c84 <Cy_SysClk_ImoSetFrequency+0xac>
                CY_REG32_CLR_SET(SRSSLT_CLK_IMO_SELECT, SRSSLT_CLK_IMO_SELECT_FREQ, locFreq);
     c92:	4a0a      	ldr	r2, [pc, #40]	@ (cbc <Cy_SysClk_ImoSetFrequency+0xe4>)
     c94:	4b0a      	ldr	r3, [pc, #40]	@ (cc0 <Cy_SysClk_ImoSetFrequency+0xe8>)
     c96:	58d3      	ldr	r3, [r2, r3]
     c98:	2207      	movs	r2, #7
     c9a:	4393      	bics	r3, r2
     c9c:	001a      	movs	r2, r3
     c9e:	68fb      	ldr	r3, [r7, #12]
     ca0:	2107      	movs	r1, #7
     ca2:	400b      	ands	r3, r1
     ca4:	4905      	ldr	r1, [pc, #20]	@ (cbc <Cy_SysClk_ImoSetFrequency+0xe4>)
     ca6:	4313      	orrs	r3, r2
     ca8:	4a05      	ldr	r2, [pc, #20]	@ (cc0 <Cy_SysClk_ImoSetFrequency+0xe8>)
     caa:	508b      	str	r3, [r1, r2]
        }
        }

     cac:	46c0      	nop			@ (mov r8, r8)
     cae:	46bd      	mov	sp, r7
     cb0:	b006      	add	sp, #24
     cb2:	bd80      	pop	{r7, pc}
     cb4:	fe91ca00 	.word	0xfe91ca00
     cb8:	000f4240 	.word	0x000f4240
     cbc:	40030000 	.word	0x40030000
     cc0:	00000f08 	.word	0x00000f08
     cc4:	0ffff000 	.word	0x0ffff000
     cc8:	00000f0c 	.word	0x00000f0c
     ccc:	00000f18 	.word	0x00000f18
     cd0:	0000c34f 	.word	0x0000c34f

00000cd4 <enable_irq>:
#include "cmsis_gcc.h"
#include <stdint.h>

void enable_irq(void)
{
     cd4:	b580      	push	{r7, lr}
     cd6:	af00      	add	r7, sp, #0
  __asm volatile ("cpsie i" : : : "memory");
     cd8:	b662      	cpsie	i
}
     cda:	46c0      	nop			@ (mov r8, r8)
     cdc:	46bd      	mov	sp, r7
     cde:	bd80      	pop	{r7, pc}

00000ce0 <disable_irq>:

void disable_irq(void)
{
     ce0:	b580      	push	{r7, lr}
     ce2:	af00      	add	r7, sp, #0
  __asm volatile ("cpsid i" : : : "memory");
     ce4:	b672      	cpsid	i
}
     ce6:	46c0      	nop			@ (mov r8, r8)
     ce8:	46bd      	mov	sp, r7
     cea:	bd80      	pop	{r7, pc}

00000cec <NVIC_SetPriority>:

void NVIC_SetPriority(uint32_t IRQn, uint32_t priority)
{
     cec:	b580      	push	{r7, lr}
     cee:	b082      	sub	sp, #8
     cf0:	af00      	add	r7, sp, #0
     cf2:	6078      	str	r0, [r7, #4]
     cf4:	6039      	str	r1, [r7, #0]
  if ((int32_t)(IRQn) >= 0)
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	2b00      	cmp	r3, #0
     cfa:	db1f      	blt.n	d3c <NVIC_SetPriority+0x50>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     cfc:	4a11      	ldr	r2, [pc, #68]	@ (d44 <NVIC_SetPriority+0x58>)
     cfe:	687b      	ldr	r3, [r7, #4]
     d00:	089b      	lsrs	r3, r3, #2
     d02:	33c0      	adds	r3, #192	@ 0xc0
     d04:	009b      	lsls	r3, r3, #2
     d06:	589b      	ldr	r3, [r3, r2]
     d08:	687a      	ldr	r2, [r7, #4]
     d0a:	2103      	movs	r1, #3
     d0c:	400a      	ands	r2, r1
     d0e:	00d2      	lsls	r2, r2, #3
     d10:	21ff      	movs	r1, #255	@ 0xff
     d12:	4091      	lsls	r1, r2
     d14:	000a      	movs	r2, r1
     d16:	43d2      	mvns	r2, r2
     d18:	401a      	ands	r2, r3
     d1a:	0011      	movs	r1, r2
       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
     d1c:	683b      	ldr	r3, [r7, #0]
     d1e:	019b      	lsls	r3, r3, #6
     d20:	22ff      	movs	r2, #255	@ 0xff
     d22:	401a      	ands	r2, r3
     d24:	687b      	ldr	r3, [r7, #4]
     d26:	2003      	movs	r0, #3
     d28:	4003      	ands	r3, r0
     d2a:	00db      	lsls	r3, r3, #3
     d2c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     d2e:	4805      	ldr	r0, [pc, #20]	@ (d44 <NVIC_SetPriority+0x58>)
     d30:	687b      	ldr	r3, [r7, #4]
     d32:	089b      	lsrs	r3, r3, #2
     d34:	430a      	orrs	r2, r1
     d36:	33c0      	adds	r3, #192	@ 0xc0
     d38:	009b      	lsls	r3, r3, #2
     d3a:	501a      	str	r2, [r3, r0]
  }

}
     d3c:	46c0      	nop			@ (mov r8, r8)
     d3e:	46bd      	mov	sp, r7
     d40:	b002      	add	sp, #8
     d42:	bd80      	pop	{r7, pc}
     d44:	e000e100 	.word	0xe000e100

00000d48 <NVIC_ClearPendingIRQ>:

void NVIC_ClearPendingIRQ(uint32_t IRQn)
{
     d48:	b580      	push	{r7, lr}
     d4a:	b082      	sub	sp, #8
     d4c:	af00      	add	r7, sp, #0
     d4e:	6078      	str	r0, [r7, #4]
  if ((int32_t)(IRQn) >= 0)
     d50:	687b      	ldr	r3, [r7, #4]
     d52:	2b00      	cmp	r3, #0
     d54:	db08      	blt.n	d68 <NVIC_ClearPendingIRQ+0x20>
  {
    NVIC->ICPR = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	221f      	movs	r2, #31
     d5a:	4013      	ands	r3, r2
     d5c:	4904      	ldr	r1, [pc, #16]	@ (d70 <NVIC_ClearPendingIRQ+0x28>)
     d5e:	2201      	movs	r2, #1
     d60:	409a      	lsls	r2, r3
     d62:	23c0      	movs	r3, #192	@ 0xc0
     d64:	005b      	lsls	r3, r3, #1
     d66:	50ca      	str	r2, [r1, r3]
  }
}
     d68:	46c0      	nop			@ (mov r8, r8)
     d6a:	46bd      	mov	sp, r7
     d6c:	b002      	add	sp, #8
     d6e:	bd80      	pop	{r7, pc}
     d70:	e000e100 	.word	0xe000e100

00000d74 <NVIC_EnableIRQ>:

void NVIC_EnableIRQ(uint32_t IRQn)
{
     d74:	b580      	push	{r7, lr}
     d76:	b082      	sub	sp, #8
     d78:	af00      	add	r7, sp, #0
     d7a:	6078      	str	r0, [r7, #4]
  if ((int32_t)(IRQn) >= 0)
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	2b00      	cmp	r3, #0
     d80:	db07      	blt.n	d92 <NVIC_EnableIRQ+0x1e>
  {
    __asm volatile("":::"memory");
    NVIC->ISER = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d82:	687b      	ldr	r3, [r7, #4]
     d84:	221f      	movs	r2, #31
     d86:	401a      	ands	r2, r3
     d88:	4b04      	ldr	r3, [pc, #16]	@ (d9c <NVIC_EnableIRQ+0x28>)
     d8a:	2101      	movs	r1, #1
     d8c:	4091      	lsls	r1, r2
     d8e:	000a      	movs	r2, r1
     d90:	601a      	str	r2, [r3, #0]
    __asm volatile("":::"memory");
  }
}
     d92:	46c0      	nop			@ (mov r8, r8)
     d94:	46bd      	mov	sp, r7
     d96:	b002      	add	sp, #8
     d98:	bd80      	pop	{r7, pc}
     d9a:	46c0      	nop			@ (mov r8, r8)
     d9c:	e000e100 	.word	0xe000e100

00000da0 <NVIC_DisableIRQ>:

void NVIC_DisableIRQ(uint32_t IRQn)
{
     da0:	b580      	push	{r7, lr}
     da2:	b082      	sub	sp, #8
     da4:	af00      	add	r7, sp, #0
     da6:	6078      	str	r0, [r7, #4]
  if ((int32_t)(IRQn) >= 0)
     da8:	687b      	ldr	r3, [r7, #4]
     daa:	2b00      	cmp	r3, #0
     dac:	db0c      	blt.n	dc8 <NVIC_DisableIRQ+0x28>
  {
    NVIC->ICER = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     dae:	687b      	ldr	r3, [r7, #4]
     db0:	221f      	movs	r2, #31
     db2:	4013      	ands	r3, r2
     db4:	4906      	ldr	r1, [pc, #24]	@ (dd0 <NVIC_DisableIRQ+0x30>)
     db6:	2201      	movs	r2, #1
     db8:	409a      	lsls	r2, r3
     dba:	0013      	movs	r3, r2
     dbc:	2280      	movs	r2, #128	@ 0x80
     dbe:	508b      	str	r3, [r1, r2]
    __asm volatile ("dsb 0xF":::"memory");
     dc0:	f3bf 8f4f 	dsb	sy
    __asm volatile ("isb 0xF":::"memory");
     dc4:	f3bf 8f6f 	isb	sy
  }
     dc8:	46c0      	nop			@ (mov r8, r8)
     dca:	46bd      	mov	sp, r7
     dcc:	b002      	add	sp, #8
     dce:	bd80      	pop	{r7, pc}
     dd0:	e000e100 	.word	0xe000e100

00000dd4 <_init>:
extern uint32_t __bss_start__;
extern uint32_t __bss_end__;

extern uint32_t __STACK_START;
extern uint32_t __STACK_END;
extern void _init(void) {;}
     dd4:	b580      	push	{r7, lr}
     dd6:	af00      	add	r7, sp, #0
     dd8:	46c0      	nop			@ (mov r8, r8)
     dda:	46bd      	mov	sp, r7
     ddc:	bd80      	pop	{r7, pc}

00000dde <Reset_handler>:
    (uint32_t)can_interrupt_can_IRQHandler,             /*  26 CAN Interrupt */
    (uint32_t)crypto_interrupt_IRQHandler               /*  27 Crypto Interrupt */
};

void Reset_handler(void)
{
     dde:	b580      	push	{r7, lr}
     de0:	b086      	sub	sp, #24
     de2:	af00      	add	r7, sp, #0
    //disable watchdog
    (*(uint32_t *) CYREG_WDT_DISABLE_KEY) = CY_SYS_WDT_KEY;
     de4:	4b1c      	ldr	r3, [pc, #112]	@ (e58 <Reset_handler+0x7a>)
     de6:	4a1d      	ldr	r2, [pc, #116]	@ (e5c <Reset_handler+0x7e>)
     de8:	601a      	str	r2, [r3, #0]

    //copy .data section to SRAM
    uint32_t size = &__data_end - &__data_start;
     dea:	4a1d      	ldr	r2, [pc, #116]	@ (e60 <Reset_handler+0x82>)
     dec:	4b1d      	ldr	r3, [pc, #116]	@ (e64 <Reset_handler+0x86>)
     dee:	1ad3      	subs	r3, r2, r3
     df0:	109b      	asrs	r3, r3, #2
     df2:	607b      	str	r3, [r7, #4]
    uint32_t *pDst = (uint32_t*)&__data_start;
     df4:	4b1b      	ldr	r3, [pc, #108]	@ (e64 <Reset_handler+0x86>)
     df6:	617b      	str	r3, [r7, #20]
    uint32_t *pSrc = (uint32_t*)&_la_data;
     df8:	4b1b      	ldr	r3, [pc, #108]	@ (e68 <Reset_handler+0x8a>)
     dfa:	613b      	str	r3, [r7, #16]

    for(uint32_t i = 0; i< size; i++)
     dfc:	2300      	movs	r3, #0
     dfe:	60fb      	str	r3, [r7, #12]
     e00:	e00a      	b.n	e18 <Reset_handler+0x3a>
    {
        *pDst++ = *pSrc++;
     e02:	693a      	ldr	r2, [r7, #16]
     e04:	1d13      	adds	r3, r2, #4
     e06:	613b      	str	r3, [r7, #16]
     e08:	697b      	ldr	r3, [r7, #20]
     e0a:	1d19      	adds	r1, r3, #4
     e0c:	6179      	str	r1, [r7, #20]
     e0e:	6812      	ldr	r2, [r2, #0]
     e10:	601a      	str	r2, [r3, #0]
    for(uint32_t i = 0; i< size; i++)
     e12:	68fb      	ldr	r3, [r7, #12]
     e14:	3301      	adds	r3, #1
     e16:	60fb      	str	r3, [r7, #12]
     e18:	68fa      	ldr	r2, [r7, #12]
     e1a:	687b      	ldr	r3, [r7, #4]
     e1c:	429a      	cmp	r2, r3
     e1e:	d3f0      	bcc.n	e02 <Reset_handler+0x24>
    }
    //int the .bss section to zero in SRAM
    size = &__bss_end__ - &__bss_start__;
     e20:	4a12      	ldr	r2, [pc, #72]	@ (e6c <Reset_handler+0x8e>)
     e22:	4b13      	ldr	r3, [pc, #76]	@ (e70 <Reset_handler+0x92>)
     e24:	1ad3      	subs	r3, r2, r3
     e26:	109b      	asrs	r3, r3, #2
     e28:	607b      	str	r3, [r7, #4]
    pDst = (uint32_t*)&__bss_start__;
     e2a:	4b11      	ldr	r3, [pc, #68]	@ (e70 <Reset_handler+0x92>)
     e2c:	617b      	str	r3, [r7, #20]

    for(uint32_t i = 0; i< size; i++)
     e2e:	2300      	movs	r3, #0
     e30:	60bb      	str	r3, [r7, #8]
     e32:	e007      	b.n	e44 <Reset_handler+0x66>
    {
        *pDst++ = 0;
     e34:	697b      	ldr	r3, [r7, #20]
     e36:	1d1a      	adds	r2, r3, #4
     e38:	617a      	str	r2, [r7, #20]
     e3a:	2200      	movs	r2, #0
     e3c:	601a      	str	r2, [r3, #0]
    for(uint32_t i = 0; i< size; i++)
     e3e:	68bb      	ldr	r3, [r7, #8]
     e40:	3301      	adds	r3, #1
     e42:	60bb      	str	r3, [r7, #8]
     e44:	68ba      	ldr	r2, [r7, #8]
     e46:	687b      	ldr	r3, [r7, #4]
     e48:	429a      	cmp	r2, r3
     e4a:	d3f3      	bcc.n	e34 <Reset_handler+0x56>
    }

    // Init C std libs
    __libc_init_array();
     e4c:	f000 f8a6 	bl	f9c <__libc_init_array>
    

    //call main()
    main();
     e50:	f7ff f936 	bl	c0 <main>

    while (1)
     e54:	46c0      	nop			@ (mov r8, r8)
     e56:	e7fd      	b.n	e54 <Reset_handler+0x76>
     e58:	40030038 	.word	0x40030038
     e5c:	aced8865 	.word	0xaced8865
     e60:	20000000 	.word	0x20000000
     e64:	20000000 	.word	0x20000000
     e68:	00001180 	.word	0x00001180
     e6c:	20000000 	.word	0x20000000
     e70:	20000000 	.word	0x20000000

00000e74 <Default_Handler>:

/*----------------------------------------------------------------------------
  Default Handler for Exceptions / Interrupts
 *----------------------------------------------------------------------------*/
void Default_Handler(void)
{
     e74:	b580      	push	{r7, lr}
     e76:	af00      	add	r7, sp, #0
    while(1);
     e78:	46c0      	nop			@ (mov r8, r8)
     e7a:	e7fd      	b.n	e78 <Default_Handler+0x4>

00000e7c <HRDFLT_Handler>:

/*----------------------------------------------------------------------------
  Default Handler for Hard Fault
 *----------------------------------------------------------------------------*/
void HRDFLT_Handler(void)
{
     e7c:	b580      	push	{r7, lr}
     e7e:	af00      	add	r7, sp, #0
    while(1);
     e80:	46c0      	nop			@ (mov r8, r8)
     e82:	e7fd      	b.n	e80 <HRDFLT_Handler+0x4>

00000e84 <__udivsi3>:
     e84:	2200      	movs	r2, #0
     e86:	0843      	lsrs	r3, r0, #1
     e88:	428b      	cmp	r3, r1
     e8a:	d374      	bcc.n	f76 <__udivsi3+0xf2>
     e8c:	0903      	lsrs	r3, r0, #4
     e8e:	428b      	cmp	r3, r1
     e90:	d35f      	bcc.n	f52 <__udivsi3+0xce>
     e92:	0a03      	lsrs	r3, r0, #8
     e94:	428b      	cmp	r3, r1
     e96:	d344      	bcc.n	f22 <__udivsi3+0x9e>
     e98:	0b03      	lsrs	r3, r0, #12
     e9a:	428b      	cmp	r3, r1
     e9c:	d328      	bcc.n	ef0 <__udivsi3+0x6c>
     e9e:	0c03      	lsrs	r3, r0, #16
     ea0:	428b      	cmp	r3, r1
     ea2:	d30d      	bcc.n	ec0 <__udivsi3+0x3c>
     ea4:	22ff      	movs	r2, #255	@ 0xff
     ea6:	0209      	lsls	r1, r1, #8
     ea8:	ba12      	rev	r2, r2
     eaa:	0c03      	lsrs	r3, r0, #16
     eac:	428b      	cmp	r3, r1
     eae:	d302      	bcc.n	eb6 <__udivsi3+0x32>
     eb0:	1212      	asrs	r2, r2, #8
     eb2:	0209      	lsls	r1, r1, #8
     eb4:	d065      	beq.n	f82 <__udivsi3+0xfe>
     eb6:	0b03      	lsrs	r3, r0, #12
     eb8:	428b      	cmp	r3, r1
     eba:	d319      	bcc.n	ef0 <__udivsi3+0x6c>
     ebc:	e000      	b.n	ec0 <__udivsi3+0x3c>
     ebe:	0a09      	lsrs	r1, r1, #8
     ec0:	0bc3      	lsrs	r3, r0, #15
     ec2:	428b      	cmp	r3, r1
     ec4:	d301      	bcc.n	eca <__udivsi3+0x46>
     ec6:	03cb      	lsls	r3, r1, #15
     ec8:	1ac0      	subs	r0, r0, r3
     eca:	4152      	adcs	r2, r2
     ecc:	0b83      	lsrs	r3, r0, #14
     ece:	428b      	cmp	r3, r1
     ed0:	d301      	bcc.n	ed6 <__udivsi3+0x52>
     ed2:	038b      	lsls	r3, r1, #14
     ed4:	1ac0      	subs	r0, r0, r3
     ed6:	4152      	adcs	r2, r2
     ed8:	0b43      	lsrs	r3, r0, #13
     eda:	428b      	cmp	r3, r1
     edc:	d301      	bcc.n	ee2 <__udivsi3+0x5e>
     ede:	034b      	lsls	r3, r1, #13
     ee0:	1ac0      	subs	r0, r0, r3
     ee2:	4152      	adcs	r2, r2
     ee4:	0b03      	lsrs	r3, r0, #12
     ee6:	428b      	cmp	r3, r1
     ee8:	d301      	bcc.n	eee <__udivsi3+0x6a>
     eea:	030b      	lsls	r3, r1, #12
     eec:	1ac0      	subs	r0, r0, r3
     eee:	4152      	adcs	r2, r2
     ef0:	0ac3      	lsrs	r3, r0, #11
     ef2:	428b      	cmp	r3, r1
     ef4:	d301      	bcc.n	efa <__udivsi3+0x76>
     ef6:	02cb      	lsls	r3, r1, #11
     ef8:	1ac0      	subs	r0, r0, r3
     efa:	4152      	adcs	r2, r2
     efc:	0a83      	lsrs	r3, r0, #10
     efe:	428b      	cmp	r3, r1
     f00:	d301      	bcc.n	f06 <__udivsi3+0x82>
     f02:	028b      	lsls	r3, r1, #10
     f04:	1ac0      	subs	r0, r0, r3
     f06:	4152      	adcs	r2, r2
     f08:	0a43      	lsrs	r3, r0, #9
     f0a:	428b      	cmp	r3, r1
     f0c:	d301      	bcc.n	f12 <__udivsi3+0x8e>
     f0e:	024b      	lsls	r3, r1, #9
     f10:	1ac0      	subs	r0, r0, r3
     f12:	4152      	adcs	r2, r2
     f14:	0a03      	lsrs	r3, r0, #8
     f16:	428b      	cmp	r3, r1
     f18:	d301      	bcc.n	f1e <__udivsi3+0x9a>
     f1a:	020b      	lsls	r3, r1, #8
     f1c:	1ac0      	subs	r0, r0, r3
     f1e:	4152      	adcs	r2, r2
     f20:	d2cd      	bcs.n	ebe <__udivsi3+0x3a>
     f22:	09c3      	lsrs	r3, r0, #7
     f24:	428b      	cmp	r3, r1
     f26:	d301      	bcc.n	f2c <__udivsi3+0xa8>
     f28:	01cb      	lsls	r3, r1, #7
     f2a:	1ac0      	subs	r0, r0, r3
     f2c:	4152      	adcs	r2, r2
     f2e:	0983      	lsrs	r3, r0, #6
     f30:	428b      	cmp	r3, r1
     f32:	d301      	bcc.n	f38 <__udivsi3+0xb4>
     f34:	018b      	lsls	r3, r1, #6
     f36:	1ac0      	subs	r0, r0, r3
     f38:	4152      	adcs	r2, r2
     f3a:	0943      	lsrs	r3, r0, #5
     f3c:	428b      	cmp	r3, r1
     f3e:	d301      	bcc.n	f44 <__udivsi3+0xc0>
     f40:	014b      	lsls	r3, r1, #5
     f42:	1ac0      	subs	r0, r0, r3
     f44:	4152      	adcs	r2, r2
     f46:	0903      	lsrs	r3, r0, #4
     f48:	428b      	cmp	r3, r1
     f4a:	d301      	bcc.n	f50 <__udivsi3+0xcc>
     f4c:	010b      	lsls	r3, r1, #4
     f4e:	1ac0      	subs	r0, r0, r3
     f50:	4152      	adcs	r2, r2
     f52:	08c3      	lsrs	r3, r0, #3
     f54:	428b      	cmp	r3, r1
     f56:	d301      	bcc.n	f5c <__udivsi3+0xd8>
     f58:	00cb      	lsls	r3, r1, #3
     f5a:	1ac0      	subs	r0, r0, r3
     f5c:	4152      	adcs	r2, r2
     f5e:	0883      	lsrs	r3, r0, #2
     f60:	428b      	cmp	r3, r1
     f62:	d301      	bcc.n	f68 <__udivsi3+0xe4>
     f64:	008b      	lsls	r3, r1, #2
     f66:	1ac0      	subs	r0, r0, r3
     f68:	4152      	adcs	r2, r2
     f6a:	0843      	lsrs	r3, r0, #1
     f6c:	428b      	cmp	r3, r1
     f6e:	d301      	bcc.n	f74 <__udivsi3+0xf0>
     f70:	004b      	lsls	r3, r1, #1
     f72:	1ac0      	subs	r0, r0, r3
     f74:	4152      	adcs	r2, r2
     f76:	1a41      	subs	r1, r0, r1
     f78:	d200      	bcs.n	f7c <__udivsi3+0xf8>
     f7a:	4601      	mov	r1, r0
     f7c:	4152      	adcs	r2, r2
     f7e:	4610      	mov	r0, r2
     f80:	4770      	bx	lr
     f82:	e7ff      	b.n	f84 <__udivsi3+0x100>
     f84:	b501      	push	{r0, lr}
     f86:	2000      	movs	r0, #0
     f88:	f000 f806 	bl	f98 <__aeabi_idiv0>
     f8c:	bd02      	pop	{r1, pc}
     f8e:	46c0      	nop			@ (mov r8, r8)

00000f90 <__aeabi_uidivmod>:
     f90:	2900      	cmp	r1, #0
     f92:	d0f7      	beq.n	f84 <__udivsi3+0x100>
     f94:	e776      	b.n	e84 <__udivsi3>
     f96:	4770      	bx	lr

00000f98 <__aeabi_idiv0>:
     f98:	4770      	bx	lr
     f9a:	46c0      	nop			@ (mov r8, r8)

00000f9c <__libc_init_array>:
     f9c:	b570      	push	{r4, r5, r6, lr}
     f9e:	2600      	movs	r6, #0
     fa0:	4c0c      	ldr	r4, [pc, #48]	@ (fd4 <__libc_init_array+0x38>)
     fa2:	4d0d      	ldr	r5, [pc, #52]	@ (fd8 <__libc_init_array+0x3c>)
     fa4:	1b64      	subs	r4, r4, r5
     fa6:	10a4      	asrs	r4, r4, #2
     fa8:	42a6      	cmp	r6, r4
     faa:	d109      	bne.n	fc0 <__libc_init_array+0x24>
     fac:	2600      	movs	r6, #0
     fae:	f7ff ff11 	bl	dd4 <_init>
     fb2:	4c0a      	ldr	r4, [pc, #40]	@ (fdc <__libc_init_array+0x40>)
     fb4:	4d0a      	ldr	r5, [pc, #40]	@ (fe0 <__libc_init_array+0x44>)
     fb6:	1b64      	subs	r4, r4, r5
     fb8:	10a4      	asrs	r4, r4, #2
     fba:	42a6      	cmp	r6, r4
     fbc:	d105      	bne.n	fca <__libc_init_array+0x2e>
     fbe:	bd70      	pop	{r4, r5, r6, pc}
     fc0:	00b3      	lsls	r3, r6, #2
     fc2:	58eb      	ldr	r3, [r5, r3]
     fc4:	4798      	blx	r3
     fc6:	3601      	adds	r6, #1
     fc8:	e7ee      	b.n	fa8 <__libc_init_array+0xc>
     fca:	00b3      	lsls	r3, r6, #2
     fcc:	58eb      	ldr	r3, [r5, r3]
     fce:	4798      	blx	r3
     fd0:	3601      	adds	r6, #1
     fd2:	e7f2      	b.n	fba <__libc_init_array+0x1e>
	...

00000fe4 <MT1_P2_1_config>:
     fe4:	0001 0000 0006 0000 0000 0000 0000 0000     ................
     ff4:	0000 0000                                   ....

00000ff8 <MT2_P1_5_config>:
     ff8:	0001 0000 0006 0000 0000 0000 0000 0000     ................
    1008:	0000 0000                                   ....

0000100c <LED8_P1_6_config>:
    100c:	0001 0000 0006 0000 0000 0000 0000 0000     ................
    101c:	0000 0000                                   ....

00001020 <SW2_P3_7_config>:
    1020:	0001 0000 0002 0000 0002 0000 0000 0000     ................
    1030:	0000 0000                                   ....

00001034 <USERLED_P3_4_config>:
    1034:	0001 0000 0006 0000 0000 0000 0000 0000     ................
    1044:	0000 0000                                   ....

00001048 <PWM_P1_2_config>:
    1048:	0001 0000 0006 0000 0000 0000 0000 0000     ................
    1058:	0000 0000                                   ....

0000105c <LED13_P5_7_config>:
    105c:	0001 0000 0006 0000 0000 0000 0000 0000     ................
    106c:	0000 0000                                   ....

00001070 <LED10_P2_2_config>:
    1070:	0001 0000 0006 0000 0000 0000 0000 0000     ................
    1080:	0000 0000                                   ....

00001084 <TIMER2_config>:
    1084:	8000 0000 0000 0000 0000 0000 0000 0000     ................
    1094:	0002 0000 4000 0000 4000 0000 0000 0000     .....@...@......
    10a4:	0001 0000 0003 0000 0000 0000 0003 0000     ................
    10b4:	0000 0000 0003 0000 0000 0000 0003 0000     ................
    10c4:	0000 0000 0003 0000 0001 0000               ............

000010d0 <TIMER0_config>:
    10d0:	ea60 0000 0000 0000 0000 0000 0000 0000     `...............
    10e0:	0002 0000 4000 0000 4000 0000 0000 0000     .....@...@......
    10f0:	0000 0000 0003 0000 0000 0000 0003 0000     ................
    1100:	0000 0000 0003 0000 0000 0000 0003 0000     ................
    1110:	0000 0000 0003 0000 0001 0000               ............

0000111c <USER_PWM_config>:
    111c:	0004 0000 0009 0000 0000 0000 0000 0000     ................
    112c:	0000 0000 2710 0000 1388 0000 0000 0000     .....'..........
    113c:	1388 0000 03e8 0000 0000 0000 0001 0000     ................
	...
    1154:	0002 0000 0003 0000 0000 0000 0003 0000     ................
    1164:	0000 0000 0003 0000 0000 0000 0003 0000     ................
    1174:	0000 0000 0003 0000 0001 0000               ............
